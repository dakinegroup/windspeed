
demo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000542  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000098  00800060  00000542  000005d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000019c  008000f8  008000f8  0000066e  2**0
                  ALLOC
  3 .stab         00002454  00000000  00000000  00000670  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001222  00000000  00000000  00002ac4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00003ce6  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	ee c1       	rjmp	.+988    	; 0x3ee <__vector_8>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	12 c1       	rjmp	.+548    	; 0x23c <__vector_11>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	e8 c0       	rjmp	.+464    	; 0x1ec <__vector_13>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e2 e4       	ldi	r30, 0x42	; 66
  3a:	f5 e0       	ldi	r31, 0x05	; 5
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a8 3f       	cpi	r26, 0xF8	; 248
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	12 e0       	ldi	r17, 0x02	; 2
  4a:	a8 ef       	ldi	r26, 0xF8	; 248
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a4 39       	cpi	r26, 0x94	; 148
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	ff d1       	rcall	.+1022   	; 0x458 <main>
  5a:	71 c2       	rjmp	.+1250   	; 0x53e <_exit>

0000005c <__bad_interrupt>:
  5c:	00 c0       	rjmp	.+0      	; 0x5e <__vector_default>

0000005e <__vector_default>:

enum { UP, DOWN };


ISR(BADISR_vect)
{
  5e:	1f 92       	push	r1
  60:	0f 92       	push	r0
  62:	0f b6       	in	r0, 0x3f	; 63
  64:	0f 92       	push	r0
  66:	11 24       	eor	r1, r1
    // user code here
}
  68:	0f 90       	pop	r0
  6a:	0f be       	out	0x3f, r0	; 63
  6c:	0f 90       	pop	r0
  6e:	1f 90       	pop	r1
  70:	18 95       	reti

00000072 <ioinit>:

void ioinit() {

USART_Init(51); 
  72:	83 e3       	ldi	r24, 0x33	; 51
  74:	90 e0       	ldi	r25, 0x00	; 0
  76:	45 d0       	rcall	.+138    	; 0x102 <USART_Init>

//Below code may be removed, i believe this was for PWM
//TCCR1B = (TCCR1B & 0xF8) | 0x01;
//TIMSK1 = TIMSK1 | _BV(TOIE1);

initTimer();
  78:	ad d1       	rcall	.+858    	; 0x3d4 <initTimer>
sei ();
  7a:	78 94       	sei
  7c:	08 95       	ret

0000007e <getBinaryString>:
static char binaryString[50];
char * getBinaryString(unsigned int bytes) {
  7e:	e9 ef       	ldi	r30, 0xF9	; 249
  80:	f0 e0       	ldi	r31, 0x00	; 0
    int i = 0;
  82:	20 e0       	ldi	r18, 0x00	; 0
  84:	30 e0       	ldi	r19, 0x00	; 0
    for(;i<16; i++) {
        binaryString[i*2] =  ((bytes << i)&0x8000)?'1':'0';
  86:	71 e3       	ldi	r23, 0x31	; 49
        binaryString[i*2+1] = ' ';
  88:	60 e2       	ldi	r22, 0x20	; 32
static char binaryString[50];
char * getBinaryString(unsigned int bytes) {
    int i = 0;
    for(;i<16; i++) {
        binaryString[i*2] =  ((bytes << i)&0x8000)?'1':'0';
  8a:	ac 01       	movw	r20, r24
  8c:	02 2e       	mov	r0, r18
  8e:	02 c0       	rjmp	.+4      	; 0x94 <getBinaryString+0x16>
  90:	44 0f       	add	r20, r20
  92:	55 1f       	adc	r21, r21
  94:	0a 94       	dec	r0
  96:	e2 f7       	brpl	.-8      	; 0x90 <getBinaryString+0x12>
  98:	45 2f       	mov	r20, r21
  9a:	40 95       	com	r20
  9c:	44 1f       	adc	r20, r20
  9e:	44 27       	eor	r20, r20
  a0:	44 1f       	adc	r20, r20
  a2:	57 2f       	mov	r21, r23
  a4:	54 1b       	sub	r21, r20
  a6:	df 01       	movw	r26, r30
  a8:	11 97       	sbiw	r26, 0x01	; 1
  aa:	5c 93       	st	X, r21
        binaryString[i*2+1] = ' ';
  ac:	60 83       	st	Z, r22
static char binaryString[50];
char * getBinaryString(unsigned int bytes) {
    int i = 0;
    for(;i<16; i++) {
  ae:	2f 5f       	subi	r18, 0xFF	; 255
  b0:	3f 4f       	sbci	r19, 0xFF	; 255
  b2:	32 96       	adiw	r30, 0x02	; 2
  b4:	20 31       	cpi	r18, 0x10	; 16
  b6:	31 05       	cpc	r19, r1
  b8:	41 f7       	brne	.-48     	; 0x8a <getBinaryString+0xc>
        binaryString[i*2] =  ((bytes << i)&0x8000)?'1':'0';
        binaryString[i*2+1] = ' ';
    }
    binaryString[i*2] = 0;
  ba:	10 92 18 01 	sts	0x0118, r1
    return &binaryString[0];
  be:	88 ef       	ldi	r24, 0xF8	; 248
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	08 95       	ret

000000c4 <initRxQueue>:
    int logs_delivered;
    int logs_silence_events;
} usartStats;
#endif

void initRxQueue() {
  c4:	e1 e6       	ldi	r30, 0x61	; 97
  c6:	f1 e0       	ldi	r31, 0x01	; 1
    int i;
    for(i=0; i < RX_BUFFER_SIZE; i++) {
            rxQueue.buffer[i] = 0;
  c8:	11 92       	st	Z+, r1
} usartStats;
#endif

void initRxQueue() {
    int i;
    for(i=0; i < RX_BUFFER_SIZE; i++) {
  ca:	81 e0       	ldi	r24, 0x01	; 1
  cc:	e5 3c       	cpi	r30, 0xC5	; 197
  ce:	f8 07       	cpc	r31, r24
  d0:	d9 f7       	brne	.-10     	; 0xc8 <initRxQueue+0x4>
            rxQueue.buffer[i] = 0;
        }   
    rxQueue.last_write = rxQueue.last_read = 0;
  d2:	10 92 c6 01 	sts	0x01C6, r1
  d6:	10 92 c5 01 	sts	0x01C5, r1
    rxQueue.userInputStringReceived = 0;
  da:	10 92 c7 01 	sts	0x01C7, r1
  de:	08 95       	ret

000000e0 <initTxQueue>:
}

void initTxQueue() {
    int i;
    txQueue.last_write=0;
  e0:	10 92 90 02 	sts	0x0290, r1
    txQueue.last_read=0;
  e4:	10 92 91 02 	sts	0x0291, r1
    txQueue.nearly_full=0;
  e8:	10 92 92 02 	sts	0x0292, r1
    txQueue.empty=1;
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	80 93 93 02 	sts	0x0293, r24
  f2:	e8 ec       	ldi	r30, 0xC8	; 200
  f4:	f1 e0       	ldi	r31, 0x01	; 1
    for(i=0; i < BUFFER_SIZE; i++) {
        txQueue.buffer[i] = 0;
  f6:	11 92       	st	Z+, r1
    int i;
    txQueue.last_write=0;
    txQueue.last_read=0;
    txQueue.nearly_full=0;
    txQueue.empty=1;
    for(i=0; i < BUFFER_SIZE; i++) {
  f8:	82 e0       	ldi	r24, 0x02	; 2
  fa:	e0 39       	cpi	r30, 0x90	; 144
  fc:	f8 07       	cpc	r31, r24
  fe:	d9 f7       	brne	.-10     	; 0xf6 <initTxQueue+0x16>
        txQueue.buffer[i] = 0;
    }   
}
 100:	08 95       	ret

00000102 <USART_Init>:
void USART_Init( unsigned int ubrr)
{
    /*Set baud rate */
    UBRRH = (unsigned char)(ubrr>>8);
 102:	90 bd       	out	0x20, r25	; 32
    UBRRL = (unsigned char)ubrr;
 104:	89 b9       	out	0x09, r24	; 9
    /*Enable receiver and transmitter */
    UCSRB = UCSRB | (1<<TXEN) | (1<<RXEN) ;
 106:	8a b1       	in	r24, 0x0a	; 10
 108:	88 61       	ori	r24, 0x18	; 24
 10a:	8a b9       	out	0x0a, r24	; 10
    UCSRB = UCSRB |  (1 << TXCIE) | (1 << RXCIE) ;
 10c:	8a b1       	in	r24, 0x0a	; 10
 10e:	80 6c       	ori	r24, 0xC0	; 192
 110:	8a b9       	out	0x0a, r24	; 10
    rxQueue.userInputStringReceived = 0;
}

void initTxQueue() {
    int i;
    txQueue.last_write=0;
 112:	10 92 90 02 	sts	0x0290, r1
    txQueue.last_read=0;
 116:	10 92 91 02 	sts	0x0291, r1
    txQueue.nearly_full=0;
 11a:	10 92 92 02 	sts	0x0292, r1
    txQueue.empty=1;
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	80 93 93 02 	sts	0x0293, r24
 124:	e8 ec       	ldi	r30, 0xC8	; 200
 126:	f1 e0       	ldi	r31, 0x01	; 1
    for(i=0; i < BUFFER_SIZE; i++) {
        txQueue.buffer[i] = 0;
 128:	11 92       	st	Z+, r1
    int i;
    txQueue.last_write=0;
    txQueue.last_read=0;
    txQueue.nearly_full=0;
    txQueue.empty=1;
    for(i=0; i < BUFFER_SIZE; i++) {
 12a:	82 e0       	ldi	r24, 0x02	; 2
 12c:	e0 39       	cpi	r30, 0x90	; 144
 12e:	f8 07       	cpc	r31, r24
 130:	d9 f7       	brne	.-10     	; 0x128 <USART_Init+0x26>
 132:	e1 e6       	ldi	r30, 0x61	; 97
 134:	f1 e0       	ldi	r31, 0x01	; 1
#endif

void initRxQueue() {
    int i;
    for(i=0; i < RX_BUFFER_SIZE; i++) {
            rxQueue.buffer[i] = 0;
 136:	11 92       	st	Z+, r1
} usartStats;
#endif

void initRxQueue() {
    int i;
    for(i=0; i < RX_BUFFER_SIZE; i++) {
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	e5 3c       	cpi	r30, 0xC5	; 197
 13c:	f8 07       	cpc	r31, r24
 13e:	d9 f7       	brne	.-10     	; 0x136 <USART_Init+0x34>
            rxQueue.buffer[i] = 0;
        }   
    rxQueue.last_write = rxQueue.last_read = 0;
 140:	10 92 c6 01 	sts	0x01C6, r1
 144:	10 92 c5 01 	sts	0x01C5, r1
    rxQueue.userInputStringReceived = 0;
 148:	10 92 c7 01 	sts	0x01C7, r1
 14c:	08 95       	ret

0000014e <USART_Transmit>:
    initRxQueue();
}

void USART_Transmit(unsigned char data) {
/* Wait for empty transmit buffer */
while ( !( UCSRA & (1<<UDRE)) )
 14e:	5d 9b       	sbis	0x0b, 5	; 11
 150:	fe cf       	rjmp	.-4      	; 0x14e <USART_Transmit>
;
  
/* Put data into buffer, sends the data */
UDR = data;
 152:	8c b9       	out	0x0c, r24	; 12
 154:	08 95       	ret

00000156 <printByte>:
  is to use sprintf, itoa functions. One need to see, which one generates
  compact code here.
*/
void printByte(unsigned char p) {
unsigned char c;
    c = (p >> 4) & 0x0f;
 156:	98 2f       	mov	r25, r24
 158:	92 95       	swap	r25
 15a:	9f 70       	andi	r25, 0x0F	; 15
    if(c < 10) {
 15c:	9a 30       	cpi	r25, 0x0A	; 10
 15e:	88 f4       	brcc	.+34     	; 0x182 <printByte+0x2c>
        USART_Transmit('0' + c);    
 160:	90 5d       	subi	r25, 0xD0	; 208
    initRxQueue();
}

void USART_Transmit(unsigned char data) {
/* Wait for empty transmit buffer */
while ( !( UCSRA & (1<<UDRE)) )
 162:	5d 9b       	sbis	0x0b, 5	; 11
 164:	fe cf       	rjmp	.-4      	; 0x162 <printByte+0xc>
;
  
/* Put data into buffer, sends the data */
UDR = data;
 166:	9c b9       	out	0x0c, r25	; 12
        USART_Transmit('0' + c);    
    } else {    
    USART_Transmit(c+'A'-10);           
        //USART_Transmit(getCharacter(c));      
    }
    c = p  & 0x0f;
 168:	8f 70       	andi	r24, 0x0F	; 15
    if(c < 10) {
 16a:	8a 30       	cpi	r24, 0x0A	; 10
 16c:	28 f4       	brcc	.+10     	; 0x178 <printByte+0x22>
        USART_Transmit('0' + c);    
 16e:	80 5d       	subi	r24, 0xD0	; 208
    initRxQueue();
}

void USART_Transmit(unsigned char data) {
/* Wait for empty transmit buffer */
while ( !( UCSRA & (1<<UDRE)) )
 170:	5d 9b       	sbis	0x0b, 5	; 11
 172:	fe cf       	rjmp	.-4      	; 0x170 <printByte+0x1a>
;
  
/* Put data into buffer, sends the data */
UDR = data;
 174:	8c b9       	out	0x0c, r24	; 12
 176:	08 95       	ret
    }
    c = p  & 0x0f;
    if(c < 10) {
        USART_Transmit('0' + c);    
    } else {
        USART_Transmit(c+'A'-10);       
 178:	89 5c       	subi	r24, 0xC9	; 201
    initRxQueue();
}

void USART_Transmit(unsigned char data) {
/* Wait for empty transmit buffer */
while ( !( UCSRA & (1<<UDRE)) )
 17a:	5d 9b       	sbis	0x0b, 5	; 11
 17c:	fe cf       	rjmp	.-4      	; 0x17a <printByte+0x24>
;
  
/* Put data into buffer, sends the data */
UDR = data;
 17e:	8c b9       	out	0x0c, r24	; 12
 180:	08 95       	ret
unsigned char c;
    c = (p >> 4) & 0x0f;
    if(c < 10) {
        USART_Transmit('0' + c);    
    } else {    
    USART_Transmit(c+'A'-10);           
 182:	99 5c       	subi	r25, 0xC9	; 201
    initRxQueue();
}

void USART_Transmit(unsigned char data) {
/* Wait for empty transmit buffer */
while ( !( UCSRA & (1<<UDRE)) )
 184:	5d 9b       	sbis	0x0b, 5	; 11
 186:	fe cf       	rjmp	.-4      	; 0x184 <printByte+0x2e>
 188:	ee cf       	rjmp	.-36     	; 0x166 <printByte+0x10>

0000018a <USART_Transmit_String_P>:
  messages. Also, we need to create constants file for message strings as well.
*/
void USART_Transmit_String_P(const char *x) {
int i = 0;
char c;
    for(i=0; i < 100; i++) {
 18a:	20 e0       	ldi	r18, 0x00	; 0
 18c:	30 e0       	ldi	r19, 0x00	; 0
 18e:	fc 01       	movw	r30, r24
 190:	e2 0f       	add	r30, r18
 192:	f3 1f       	adc	r31, r19
            //printByte(pgm_read_byte((char *)(0x0000 + i)));
        c = pgm_read_byte(&x[i]);
 194:	e4 91       	lpm	r30, Z
        if(c)
 196:	ee 23       	and	r30, r30
 198:	41 f0       	breq	.+16     	; 0x1aa <USART_Transmit_String_P+0x20>
    initRxQueue();
}

void USART_Transmit(unsigned char data) {
/* Wait for empty transmit buffer */
while ( !( UCSRA & (1<<UDRE)) )
 19a:	5d 9b       	sbis	0x0b, 5	; 11
 19c:	fe cf       	rjmp	.-4      	; 0x19a <USART_Transmit_String_P+0x10>
;
  
/* Put data into buffer, sends the data */
UDR = data;
 19e:	ec b9       	out	0x0c, r30	; 12
  messages. Also, we need to create constants file for message strings as well.
*/
void USART_Transmit_String_P(const char *x) {
int i = 0;
char c;
    for(i=0; i < 100; i++) {
 1a0:	2f 5f       	subi	r18, 0xFF	; 255
 1a2:	3f 4f       	sbci	r19, 0xFF	; 255
 1a4:	24 36       	cpi	r18, 0x64	; 100
 1a6:	31 05       	cpc	r19, r1
 1a8:	91 f7       	brne	.-28     	; 0x18e <USART_Transmit_String_P+0x4>
    initRxQueue();
}

void USART_Transmit(unsigned char data) {
/* Wait for empty transmit buffer */
while ( !( UCSRA & (1<<UDRE)) )
 1aa:	5d 9b       	sbis	0x0b, 5	; 11
 1ac:	fe cf       	rjmp	.-4      	; 0x1aa <USART_Transmit_String_P+0x20>
;
  
/* Put data into buffer, sends the data */
UDR = data;
 1ae:	8d e0       	ldi	r24, 0x0D	; 13
 1b0:	8c b9       	out	0x0c, r24	; 12
    initRxQueue();
}

void USART_Transmit(unsigned char data) {
/* Wait for empty transmit buffer */
while ( !( UCSRA & (1<<UDRE)) )
 1b2:	5d 9b       	sbis	0x0b, 5	; 11
 1b4:	fe cf       	rjmp	.-4      	; 0x1b2 <USART_Transmit_String_P+0x28>
;
  
/* Put data into buffer, sends the data */
UDR = data;
 1b6:	8a e0       	ldi	r24, 0x0A	; 10
 1b8:	8c b9       	out	0x0c, r24	; 12
 1ba:	08 95       	ret

000001bc <USART_Transmit_Bytes_P>:
  Future enhancements: Get the argument as address and length of the bytes to be
  displayed. While doing this, one need to keep in mind, the tx buffer. Because
  if this information is dumped continously, it will be truncated. Therefore, we
  need to provide a user intervention asking for "more.."
*/
void USART_Transmit_Bytes_P() {
 1bc:	08 95       	ret

000001be <USART_Transmit_String>:
/* Developer Notes:
   This is a blocking call. It waits continously for transmission end and transfers next character
   This is very slow and may be useful, where there is no backend work being done as part of main loop.
   Interrupt based work is anyway happening.
*/
void USART_Transmit_String(char *x) {
 1be:	fc 01       	movw	r30, r24
int i = 0;
char c;
    for(i=0; i < 100; i++) {
 1c0:	20 e0       	ldi	r18, 0x00	; 0
 1c2:	30 e0       	ldi	r19, 0x00	; 0
        c = x[i];
 1c4:	81 91       	ld	r24, Z+
        if(c)
 1c6:	88 23       	and	r24, r24
 1c8:	41 f0       	breq	.+16     	; 0x1da <USART_Transmit_String+0x1c>
    initRxQueue();
}

void USART_Transmit(unsigned char data) {
/* Wait for empty transmit buffer */
while ( !( UCSRA & (1<<UDRE)) )
 1ca:	5d 9b       	sbis	0x0b, 5	; 11
 1cc:	fe cf       	rjmp	.-4      	; 0x1ca <USART_Transmit_String+0xc>
;
  
/* Put data into buffer, sends the data */
UDR = data;
 1ce:	8c b9       	out	0x0c, r24	; 12
   Interrupt based work is anyway happening.
*/
void USART_Transmit_String(char *x) {
int i = 0;
char c;
    for(i=0; i < 100; i++) {
 1d0:	2f 5f       	subi	r18, 0xFF	; 255
 1d2:	3f 4f       	sbci	r19, 0xFF	; 255
 1d4:	24 36       	cpi	r18, 0x64	; 100
 1d6:	31 05       	cpc	r19, r1
 1d8:	a9 f7       	brne	.-22     	; 0x1c4 <USART_Transmit_String+0x6>
    initRxQueue();
}

void USART_Transmit(unsigned char data) {
/* Wait for empty transmit buffer */
while ( !( UCSRA & (1<<UDRE)) )
 1da:	5d 9b       	sbis	0x0b, 5	; 11
 1dc:	fe cf       	rjmp	.-4      	; 0x1da <USART_Transmit_String+0x1c>
;
  
/* Put data into buffer, sends the data */
UDR = data;
 1de:	8d e0       	ldi	r24, 0x0D	; 13
 1e0:	8c b9       	out	0x0c, r24	; 12
    initRxQueue();
}

void USART_Transmit(unsigned char data) {
/* Wait for empty transmit buffer */
while ( !( UCSRA & (1<<UDRE)) )
 1e2:	5d 9b       	sbis	0x0b, 5	; 11
 1e4:	fe cf       	rjmp	.-4      	; 0x1e2 <USART_Transmit_String+0x24>
;
  
/* Put data into buffer, sends the data */
UDR = data;
 1e6:	8a e0       	ldi	r24, 0x0A	; 10
 1e8:	8c b9       	out	0x0c, r24	; 12
 1ea:	08 95       	ret

000001ec <__vector_13>:
/* Developer Notes:
   PING PONG Buffer being maintained.
   Further it can be enhanced to implement circular buffer with prevention for overwriting.
*/
ISR(USART_TXC_vect)
{
 1ec:	1f 92       	push	r1
 1ee:	0f 92       	push	r0
 1f0:	0f b6       	in	r0, 0x3f	; 63
 1f2:	0f 92       	push	r0
 1f4:	11 24       	eor	r1, r1
 1f6:	8f 93       	push	r24
 1f8:	9f 93       	push	r25
 1fa:	ef 93       	push	r30
 1fc:	ff 93       	push	r31
  cli();
 1fe:	f8 94       	cli
  if(txQueue.last_read < txQueue.last_write) {
 200:	80 91 91 02 	lds	r24, 0x0291
 204:	90 91 90 02 	lds	r25, 0x0290
 208:	89 17       	cp	r24, r25
 20a:	70 f0       	brcs	.+28     	; 0x228 <__vector_13+0x3c>
      UDR = txQueue.buffer[txQueue.last_read];
      txQueue.last_read=txQueue.last_read+1;    
  } else {
    txQueue.last_read = 0;
 20c:	10 92 91 02 	sts	0x0291, r1
    txQueue.last_write= 0;
 210:	10 92 90 02 	sts	0x0290, r1
  }            
  sei();
 214:	78 94       	sei
}
 216:	ff 91       	pop	r31
 218:	ef 91       	pop	r30
 21a:	9f 91       	pop	r25
 21c:	8f 91       	pop	r24
 21e:	0f 90       	pop	r0
 220:	0f be       	out	0x3f, r0	; 63
 222:	0f 90       	pop	r0
 224:	1f 90       	pop	r1
 226:	18 95       	reti
*/
ISR(USART_TXC_vect)
{
  cli();
  if(txQueue.last_read < txQueue.last_write) {
      UDR = txQueue.buffer[txQueue.last_read];
 228:	e8 2f       	mov	r30, r24
 22a:	f0 e0       	ldi	r31, 0x00	; 0
 22c:	e8 53       	subi	r30, 0x38	; 56
 22e:	fe 4f       	sbci	r31, 0xFE	; 254
 230:	90 81       	ld	r25, Z
 232:	9c b9       	out	0x0c, r25	; 12
      txQueue.last_read=txQueue.last_read+1;    
 234:	8f 5f       	subi	r24, 0xFF	; 255
 236:	80 93 91 02 	sts	0x0291, r24
 23a:	ec cf       	rjmp	.-40     	; 0x214 <__vector_13+0x28>

0000023c <__vector_11>:
   Though it is written here, not much use is envisaged currently, till we have machine to
   machine communications and a independent interrupt on receipt of a frame. Need to look
   at such software interrupt.
*/
ISR(USART_RXC_vect)
{
 23c:	1f 92       	push	r1
 23e:	0f 92       	push	r0
 240:	0f b6       	in	r0, 0x3f	; 63
 242:	0f 92       	push	r0
 244:	11 24       	eor	r1, r1
 246:	8f 93       	push	r24
 248:	9f 93       	push	r25
 24a:	ef 93       	push	r30
 24c:	ff 93       	push	r31
  char tchar;
  cli();
 24e:	f8 94       	cli

  if(rxQueue.last_write >= RX_BUFFER_SIZE ||
 250:	80 91 c5 01 	lds	r24, 0x01C5
 254:	84 36       	cpi	r24, 0x64	; 100
 256:	d0 f4       	brcc	.+52     	; 0x28c <__vector_11+0x50>
 258:	90 91 c7 01 	lds	r25, 0x01C7
 25c:	91 30       	cpi	r25, 0x01	; 1
 25e:	b1 f0       	breq	.+44     	; 0x28c <__vector_11+0x50>
      rxQueue.userInputStringReceived == 1) {
     tchar = UDR; //drop this byte;
     UDR = tchar;
  } else {
    rxQueue.buffer[rxQueue.last_write] = UDR;
 260:	9c b1       	in	r25, 0x0c	; 12
 262:	e8 2f       	mov	r30, r24
 264:	f0 e0       	ldi	r31, 0x00	; 0
 266:	ef 59       	subi	r30, 0x9F	; 159
 268:	fe 4f       	sbci	r31, 0xFE	; 254
 26a:	90 83       	st	Z, r25
     UDR = rxQueue.buffer[rxQueue.last_write];
 26c:	9c b9       	out	0x0c, r25	; 12
     if(!rxQueue.buffer[rxQueue.last_write] 
 26e:	90 81       	ld	r25, Z
 270:	99 23       	and	r25, r25
 272:	21 f0       	breq	.+8      	; 0x27c <__vector_11+0x40>
      || rxQueue.buffer[rxQueue.last_write] == '\r' 
 274:	9d 30       	cpi	r25, 0x0D	; 13
 276:	11 f0       	breq	.+4      	; 0x27c <__vector_11+0x40>
      || rxQueue.buffer[rxQueue.last_write] == '\n') {
 278:	9a 30       	cpi	r25, 0x0A	; 10
 27a:	21 f4       	brne	.+8      	; 0x284 <__vector_11+0x48>
            rxQueue.buffer[rxQueue.last_write] = 0;
 27c:	10 82       	st	Z, r1
              rxQueue.userInputStringReceived = 1;
 27e:	91 e0       	ldi	r25, 0x01	; 1
 280:	90 93 c7 01 	sts	0x01C7, r25
            
        }

    rxQueue.last_write++;
 284:	8f 5f       	subi	r24, 0xFF	; 255
 286:	80 93 c5 01 	sts	0x01C5, r24
 28a:	02 c0       	rjmp	.+4      	; 0x290 <__vector_11+0x54>
  char tchar;
  cli();

  if(rxQueue.last_write >= RX_BUFFER_SIZE ||
      rxQueue.userInputStringReceived == 1) {
     tchar = UDR; //drop this byte;
 28c:	8c b1       	in	r24, 0x0c	; 12
     UDR = tchar;
 28e:	8c b9       	out	0x0c, r24	; 12
            
        }

    rxQueue.last_write++;
  }
  sei();
 290:	78 94       	sei
}
 292:	ff 91       	pop	r31
 294:	ef 91       	pop	r30
 296:	9f 91       	pop	r25
 298:	8f 91       	pop	r24
 29a:	0f 90       	pop	r0
 29c:	0f be       	out	0x3f, r0	; 63
 29e:	0f 90       	pop	r0
 2a0:	1f 90       	pop	r1
 2a2:	18 95       	reti

000002a4 <USART_Transmit_String2>:
void USART_Transmit_String2(char *x) {
    int i=0;
    #if STATS_ENABLED
    int trunc = 0;
    #endif
    cli();
 2a4:	f8 94       	cli
    if(txQueue.last_write == 0) {
 2a6:	60 91 90 02 	lds	r22, 0x0290
 2aa:	61 11       	cpse	r22, r1
 2ac:	17 c0       	rjmp	.+46     	; 0x2dc <USART_Transmit_String2+0x38>
        UDR = '$';
 2ae:	24 e2       	ldi	r18, 0x24	; 36
 2b0:	2c b9       	out	0x0c, r18	; 12
 2b2:	fc 01       	movw	r30, r24
 2b4:	a8 ec       	ldi	r26, 0xC8	; 200
 2b6:	b1 e0       	ldi	r27, 0x01	; 1
        #if STATS_ENABLED
        usartStats.logs_silence_events++;
        #endif
        for(i=0; i < BUFFER_SIZE/2 && x[i] != 0; i++) {
 2b8:	80 e0       	ldi	r24, 0x00	; 0
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	08 c0       	rjmp	.+16     	; 0x2ce <USART_Transmit_String2+0x2a>
            txQueue.buffer[i] = x[i];
 2be:	2d 93       	st	X+, r18
            if((txQueue.last_write + i) >= (BUFFER_SIZE-1)) {
 2c0:	87 3c       	cpi	r24, 0xC7	; 199
 2c2:	91 05       	cpc	r25, r1
 2c4:	3c f4       	brge	.+14     	; 0x2d4 <USART_Transmit_String2+0x30>
    if(txQueue.last_write == 0) {
        UDR = '$';
        #if STATS_ENABLED
        usartStats.logs_silence_events++;
        #endif
        for(i=0; i < BUFFER_SIZE/2 && x[i] != 0; i++) {
 2c6:	01 96       	adiw	r24, 0x01	; 1
 2c8:	84 36       	cpi	r24, 0x64	; 100
 2ca:	91 05       	cpc	r25, r1
 2cc:	41 f1       	breq	.+80     	; 0x31e <USART_Transmit_String2+0x7a>
 2ce:	21 91       	ld	r18, Z+
 2d0:	21 11       	cpse	r18, r1
 2d2:	f5 cf       	rjmp	.-22     	; 0x2be <USART_Transmit_String2+0x1a>
                  trunc = 1;
                #endif
                break;
            }
        }
        txQueue.last_write = i;
 2d4:	80 93 90 02 	sts	0x0290, r24
    } else {
        #if STATS_ENABLED
        usartStats.logs_dropped++;
        #endif
    }
    sei();
 2d8:	78 94       	sei
 2da:	08 95       	ret
        } else {
            usartStats.logs_delivered++;
        }
        #endif
    } else if(txQueue.last_write > 0 
            && txQueue.last_write < BUFFER_SIZE) {
 2dc:	2f ef       	ldi	r18, 0xFF	; 255
 2de:	26 0f       	add	r18, r22
            usartStats.logs_truncated++;
        } else {
            usartStats.logs_delivered++;
        }
        #endif
    } else if(txQueue.last_write > 0 
 2e0:	27 3c       	cpi	r18, 0xC7	; 199
 2e2:	d0 f7       	brcc	.-12     	; 0x2d8 <USART_Transmit_String2+0x34>
 2e4:	fc 01       	movw	r30, r24
            && txQueue.last_write < BUFFER_SIZE) {
        for(i=0; i < BUFFER_SIZE/2 && x[i] != 0; i++) {
            txQueue.buffer[i+txQueue.last_write] = x[i];
 2e6:	46 2f       	mov	r20, r22
 2e8:	50 e0       	ldi	r21, 0x00	; 0
 2ea:	da 01       	movw	r26, r20
 2ec:	a8 53       	subi	r26, 0x38	; 56
 2ee:	be 4f       	sbci	r27, 0xFE	; 254
 2f0:	27 ec       	ldi	r18, 0xC7	; 199
 2f2:	30 e0       	ldi	r19, 0x00	; 0
 2f4:	24 1b       	sub	r18, r20
 2f6:	35 0b       	sbc	r19, r21
 2f8:	80 e0       	ldi	r24, 0x00	; 0
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	08 c0       	rjmp	.+16     	; 0x30e <USART_Transmit_String2+0x6a>
 2fe:	4d 93       	st	X+, r20
            if((txQueue.last_write + i) >= (BUFFER_SIZE-1)) {
 300:	82 17       	cp	r24, r18
 302:	93 07       	cpc	r25, r19
 304:	39 f0       	breq	.+14     	; 0x314 <USART_Transmit_String2+0x70>
            usartStats.logs_delivered++;
        }
        #endif
    } else if(txQueue.last_write > 0 
            && txQueue.last_write < BUFFER_SIZE) {
        for(i=0; i < BUFFER_SIZE/2 && x[i] != 0; i++) {
 306:	01 96       	adiw	r24, 0x01	; 1
 308:	84 36       	cpi	r24, 0x64	; 100
 30a:	91 05       	cpc	r25, r1
 30c:	51 f0       	breq	.+20     	; 0x322 <USART_Transmit_String2+0x7e>
 30e:	41 91       	ld	r20, Z+
 310:	41 11       	cpse	r20, r1
 312:	f5 cf       	rjmp	.-22     	; 0x2fe <USART_Transmit_String2+0x5a>
            usartStats.logs_truncated++;
        } else {
            usartStats.logs_delivered++;
        }
        #endif
        txQueue.last_write = i + txQueue.last_write;
 314:	68 0f       	add	r22, r24
 316:	60 93 90 02 	sts	0x0290, r22
    } else {
        #if STATS_ENABLED
        usartStats.logs_dropped++;
        #endif
    }
    sei();
 31a:	78 94       	sei
 31c:	08 95       	ret
 31e:	84 e6       	ldi	r24, 0x64	; 100
 320:	d9 cf       	rjmp	.-78     	; 0x2d4 <USART_Transmit_String2+0x30>
 322:	84 e6       	ldi	r24, 0x64	; 100
 324:	f7 cf       	rjmp	.-18     	; 0x314 <USART_Transmit_String2+0x70>

00000326 <USART_Receive_String>:
/* Developer Notes:
   This is blocking call, we receive data / command from user.
   Further enhancements - we can make it non-blocking and take a
    callback for processing commands.
*/
unsigned char* USART_Receive_String() {
 326:	ea e2       	ldi	r30, 0x2A	; 42
 328:	f1 e0       	ldi	r31, 0x01	; 1
    while(1) {
        if(i >= 49) {
            inputs[49] = 0;
            break;
        }
        while ( !( UCSRA & (1<<RXC)) )
 32a:	5f 9b       	sbis	0x0b, 7	; 11
 32c:	fe cf       	rjmp	.-4      	; 0x32a <USART_Receive_String+0x4>
 32e:	cf 01       	movw	r24, r30
 330:	8a 52       	subi	r24, 0x2A	; 42
 332:	91 40       	sbci	r25, 0x01	; 1
;
//loop_until_bit_is_set(UCSR0A, );
        inputs[i] = UDR;
 334:	2c b1       	in	r18, 0x0c	; 12
 336:	20 83       	st	Z, r18
    initRxQueue();
}

void USART_Transmit(unsigned char data) {
/* Wait for empty transmit buffer */
while ( !( UCSRA & (1<<UDRE)) )
 338:	5d 9b       	sbis	0x0b, 5	; 11
 33a:	fe cf       	rjmp	.-4      	; 0x338 <USART_Receive_String+0x12>
;
  
/* Put data into buffer, sends the data */
UDR = data;
 33c:	2c b9       	out	0x0c, r18	; 12
        while ( !( UCSRA & (1<<RXC)) )
;
//loop_until_bit_is_set(UCSR0A, );
        inputs[i] = UDR;
        USART_Transmit(inputs[i]);
        if(!inputs[i] || inputs[i] == '\r' || inputs[i] == '\n') {
 33e:	21 91       	ld	r18, Z+
 340:	22 23       	and	r18, r18
 342:	59 f0       	breq	.+22     	; 0x35a <USART_Receive_String+0x34>
 344:	2d 30       	cpi	r18, 0x0D	; 13
 346:	49 f0       	breq	.+18     	; 0x35a <USART_Receive_String+0x34>
 348:	2a 30       	cpi	r18, 0x0A	; 10
 34a:	39 f0       	breq	.+14     	; 0x35a <USART_Receive_String+0x34>
*/
unsigned char* USART_Receive_String() {
    static unsigned char inputs[50];
    unsigned char i=0;;
    while(1) {
        if(i >= 49) {
 34c:	81 e0       	ldi	r24, 0x01	; 1
 34e:	eb 35       	cpi	r30, 0x5B	; 91
 350:	f8 07       	cpc	r31, r24
 352:	59 f7       	brne	.-42     	; 0x32a <USART_Receive_String+0x4>
            inputs[49] = 0;
 354:	10 92 5b 01 	sts	0x015B, r1
            break;
 358:	04 c0       	rjmp	.+8      	; 0x362 <USART_Receive_String+0x3c>
;
//loop_until_bit_is_set(UCSR0A, );
        inputs[i] = UDR;
        USART_Transmit(inputs[i]);
        if(!inputs[i] || inputs[i] == '\r' || inputs[i] == '\n') {
            inputs[i] = 0;
 35a:	fc 01       	movw	r30, r24
 35c:	e6 5d       	subi	r30, 0xD6	; 214
 35e:	fe 4f       	sbci	r31, 0xFE	; 254
 360:	10 82       	st	Z, r1
            break;
        }
        i++;
    }
    USART_Transmit_String("\r\n You have typed: ");
 362:	81 ee       	ldi	r24, 0xE1	; 225
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	2b df       	rcall	.-426    	; 0x1be <USART_Transmit_String>
    //Issue: Here use of strcat("You have typed", inputs) had caused crash
    USART_Transmit_String((char *)inputs);
 368:	8a e2       	ldi	r24, 0x2A	; 42
 36a:	91 e0       	ldi	r25, 0x01	; 1
 36c:	28 df       	rcall	.-432    	; 0x1be <USART_Transmit_String>
    USART_Transmit_String("\r\n");
 36e:	85 ef       	ldi	r24, 0xF5	; 245
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	25 df       	rcall	.-438    	; 0x1be <USART_Transmit_String>
    return inputs;
}
 374:	8a e2       	ldi	r24, 0x2A	; 42
 376:	91 e0       	ldi	r25, 0x01	; 1
 378:	08 95       	ret

0000037a <USART_Receive_String2>:
   in independent buffers 
*/
   
int USART_Receive_String2(char *buff, int len) {
    int i = 0;
    cli();
 37a:	f8 94       	cli
    if(rxQueue.userInputStringReceived) {
 37c:	20 91 c7 01 	lds	r18, 0x01C7
 380:	22 23       	and	r18, r18
 382:	09 f1       	breq	.+66     	; 0x3c6 <USART_Receive_String2+0x4c>
      for(i=0; i < rxQueue.last_write && i < len; i++) {
 384:	20 91 c5 01 	lds	r18, 0x01C5
 388:	22 23       	and	r18, r18
 38a:	09 f1       	breq	.+66     	; 0x3ce <USART_Receive_String2+0x54>
 38c:	16 16       	cp	r1, r22
 38e:	17 06       	cpc	r1, r23
 390:	f4 f4       	brge	.+60     	; 0x3ce <USART_Receive_String2+0x54>
 392:	a1 e6       	ldi	r26, 0x61	; 97
 394:	b1 e0       	ldi	r27, 0x01	; 1
 396:	fc 01       	movw	r30, r24
 398:	80 e0       	ldi	r24, 0x00	; 0
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	03 c0       	rjmp	.+6      	; 0x3a4 <USART_Receive_String2+0x2a>
 39e:	86 17       	cp	r24, r22
 3a0:	97 07       	cpc	r25, r23
 3a2:	49 f0       	breq	.+18     	; 0x3b6 <USART_Receive_String2+0x3c>
        buff[i] = rxQueue.buffer[i];
 3a4:	2d 91       	ld	r18, X+
 3a6:	21 93       	st	Z+, r18
   
int USART_Receive_String2(char *buff, int len) {
    int i = 0;
    cli();
    if(rxQueue.userInputStringReceived) {
      for(i=0; i < rxQueue.last_write && i < len; i++) {
 3a8:	01 96       	adiw	r24, 0x01	; 1
 3aa:	20 91 c5 01 	lds	r18, 0x01C5
 3ae:	30 e0       	ldi	r19, 0x00	; 0
 3b0:	82 17       	cp	r24, r18
 3b2:	93 07       	cpc	r25, r19
 3b4:	a4 f3       	brlt	.-24     	; 0x39e <USART_Receive_String2+0x24>
        buff[i] = rxQueue.buffer[i];
      }
      rxQueue.last_write =0; rxQueue.last_read = 0;
 3b6:	10 92 c5 01 	sts	0x01C5, r1
 3ba:	10 92 c6 01 	sts	0x01C6, r1
      rxQueue.userInputStringReceived = 0; /* ready to receive next command */
 3be:	10 92 c7 01 	sts	0x01C7, r1
    }
    sei();
 3c2:	78 94       	sei
  return i;
}
 3c4:	08 95       	ret
   to create receive routine here and identify frames, which are saved 
   in independent buffers 
*/
   
int USART_Receive_String2(char *buff, int len) {
    int i = 0;
 3c6:	80 e0       	ldi	r24, 0x00	; 0
 3c8:	90 e0       	ldi	r25, 0x00	; 0
        buff[i] = rxQueue.buffer[i];
      }
      rxQueue.last_write =0; rxQueue.last_read = 0;
      rxQueue.userInputStringReceived = 0; /* ready to receive next command */
    }
    sei();
 3ca:	78 94       	sei
  return i;
}
 3cc:	08 95       	ret
   
int USART_Receive_String2(char *buff, int len) {
    int i = 0;
    cli();
    if(rxQueue.userInputStringReceived) {
      for(i=0; i < rxQueue.last_write && i < len; i++) {
 3ce:	80 e0       	ldi	r24, 0x00	; 0
 3d0:	90 e0       	ldi	r25, 0x00	; 0
 3d2:	f1 cf       	rjmp	.-30     	; 0x3b6 <USART_Receive_String2+0x3c>

000003d4 <initTimer>:

unsigned int timestamp[2] = {0,0};
unsigned char debug_led = 0;

void initTimer() {
  TIMSK = TIMSK | _BV(TOIE1);
 3d4:	89 b7       	in	r24, 0x39	; 57
 3d6:	84 60       	ori	r24, 0x04	; 4
 3d8:	89 bf       	out	0x39, r24	; 57
  TCCR1B = (TCCR1B & 0xF8) | 0x01;
 3da:	8e b5       	in	r24, 0x2e	; 46
 3dc:	88 7f       	andi	r24, 0xF8	; 248
 3de:	81 60       	ori	r24, 0x01	; 1
 3e0:	8e bd       	out	0x2e, r24	; 46
  DDRB = DDRB | _BV(DDB1);
 3e2:	b9 9a       	sbi	0x17, 1	; 23
  PORTB = PORTB & ~(_BV(1));
 3e4:	c1 98       	cbi	0x18, 1	; 24
  debug_led = 1;
 3e6:	81 e0       	ldi	r24, 0x01	; 1
 3e8:	80 93 5c 01 	sts	0x015C, r24
 3ec:	08 95       	ret

000003ee <__vector_8>:
 3ee:	1f 92       	push	r1
 3f0:	0f 92       	push	r0
 3f2:	0f b6       	in	r0, 0x3f	; 63
 3f4:	0f 92       	push	r0
 3f6:	11 24       	eor	r1, r1
 3f8:	8f 93       	push	r24
 3fa:	9f 93       	push	r25
 3fc:	f8 94       	cli
 3fe:	80 91 5d 01 	lds	r24, 0x015D
 402:	90 91 5e 01 	lds	r25, 0x015E
 406:	01 96       	adiw	r24, 0x01	; 1
 408:	90 93 5e 01 	sts	0x015E, r25
 40c:	80 93 5d 01 	sts	0x015D, r24
 410:	00 97       	sbiw	r24, 0x00	; 0
 412:	c1 f4       	brne	.+48     	; 0x444 <__vector_8+0x56>
 414:	80 91 5f 01 	lds	r24, 0x015F
 418:	90 91 60 01 	lds	r25, 0x0160
 41c:	01 96       	adiw	r24, 0x01	; 1
 41e:	90 93 60 01 	sts	0x0160, r25
 422:	80 93 5f 01 	sts	0x015F, r24
 426:	80 91 5c 01 	lds	r24, 0x015C
 42a:	88 23       	and	r24, r24
 42c:	81 f0       	breq	.+32     	; 0x44e <__vector_8+0x60>
 42e:	10 92 5c 01 	sts	0x015C, r1
 432:	c1 98       	cbi	0x18, 1	; 24
 434:	78 94       	sei
 436:	9f 91       	pop	r25
 438:	8f 91       	pop	r24
 43a:	0f 90       	pop	r0
 43c:	0f be       	out	0x3f, r0	; 63
 43e:	0f 90       	pop	r0
 440:	1f 90       	pop	r1
 442:	18 95       	reti
 444:	8f 73       	andi	r24, 0x3F	; 63
 446:	99 27       	eor	r25, r25
 448:	89 2b       	or	r24, r25
 44a:	a1 f7       	brne	.-24     	; 0x434 <__vector_8+0x46>
 44c:	ec cf       	rjmp	.-40     	; 0x426 <__vector_8+0x38>
 44e:	81 e0       	ldi	r24, 0x01	; 1
 450:	80 93 5c 01 	sts	0x015C, r24
 454:	c1 9a       	sbi	0x18, 1	; 24
 456:	ee cf       	rjmp	.-36     	; 0x434 <__vector_8+0x46>

00000458 <main>:
 458:	cf 93       	push	r28
 45a:	df 93       	push	r29
 45c:	cd b7       	in	r28, 0x3d	; 61
 45e:	de b7       	in	r29, 0x3e	; 62
 460:	64 97       	sbiw	r28, 0x14	; 20
 462:	0f b6       	in	r0, 0x3f	; 63
 464:	f8 94       	cli
 466:	de bf       	out	0x3e, r29	; 62
 468:	0f be       	out	0x3f, r0	; 63
 46a:	cd bf       	out	0x3d, r28	; 61
 46c:	83 e3       	ldi	r24, 0x33	; 51
 46e:	90 e0       	ldi	r25, 0x00	; 0
 470:	48 de       	rcall	.-880    	; 0x102 <USART_Init>
 472:	b0 df       	rcall	.-160    	; 0x3d4 <initTimer>
 474:	78 94       	sei
 476:	80 e6       	ldi	r24, 0x60	; 96
 478:	90 e0       	ldi	r25, 0x00	; 0
 47a:	a1 de       	rcall	.-702    	; 0x1be <USART_Transmit_String>
 47c:	8c e6       	ldi	r24, 0x6C	; 108
 47e:	90 e0       	ldi	r25, 0x00	; 0
 480:	9e de       	rcall	.-708    	; 0x1be <USART_Transmit_String>
 482:	40 e1       	ldi	r20, 0x10	; 16
 484:	50 e0       	ldi	r21, 0x00	; 0
 486:	be 01       	movw	r22, r28
 488:	6f 5f       	subi	r22, 0xFF	; 255
 48a:	7f 4f       	sbci	r23, 0xFF	; 255
 48c:	83 e2       	ldi	r24, 0x23	; 35
 48e:	90 e0       	ldi	r25, 0x00	; 0
 490:	13 d0       	rcall	.+38     	; 0x4b8 <itoa>
 492:	ce 01       	movw	r24, r28
 494:	01 96       	adiw	r24, 0x01	; 1
 496:	06 df       	rcall	.-500    	; 0x2a4 <USART_Transmit_String2>
 498:	8b e7       	ldi	r24, 0x7B	; 123
 49a:	90 e0       	ldi	r25, 0x00	; 0
 49c:	03 df       	rcall	.-506    	; 0x2a4 <USART_Transmit_String2>
 49e:	83 e9       	ldi	r24, 0x93	; 147
 4a0:	90 e0       	ldi	r25, 0x00	; 0
 4a2:	00 df       	rcall	.-512    	; 0x2a4 <USART_Transmit_String2>
 4a4:	8c ea       	ldi	r24, 0xAC	; 172
 4a6:	90 e0       	ldi	r25, 0x00	; 0
 4a8:	fd de       	rcall	.-518    	; 0x2a4 <USART_Transmit_String2>
 4aa:	3d df       	rcall	.-390    	; 0x326 <USART_Receive_String>
 4ac:	fb de       	rcall	.-522    	; 0x2a4 <USART_Transmit_String2>
 4ae:	88 ec       	ldi	r24, 0xC8	; 200
 4b0:	90 e0       	ldi	r25, 0x00	; 0
 4b2:	f8 de       	rcall	.-528    	; 0x2a4 <USART_Transmit_String2>
 4b4:	00 00       	nop
 4b6:	fe cf       	rjmp	.-4      	; 0x4b4 <__stack+0x55>

000004b8 <itoa>:
 4b8:	fb 01       	movw	r30, r22
 4ba:	9f 01       	movw	r18, r30
 4bc:	e8 94       	clt
 4be:	42 30       	cpi	r20, 0x02	; 2
 4c0:	bc f0       	brlt	.+46     	; 0x4f0 <itoa+0x38>
 4c2:	45 32       	cpi	r20, 0x25	; 37
 4c4:	ac f4       	brge	.+42     	; 0x4f0 <itoa+0x38>
 4c6:	4a 30       	cpi	r20, 0x0A	; 10
 4c8:	29 f4       	brne	.+10     	; 0x4d4 <itoa+0x1c>
 4ca:	97 fb       	bst	r25, 7
 4cc:	1e f4       	brtc	.+6      	; 0x4d4 <itoa+0x1c>
 4ce:	90 95       	com	r25
 4d0:	81 95       	neg	r24
 4d2:	9f 4f       	sbci	r25, 0xFF	; 255
 4d4:	64 2f       	mov	r22, r20
 4d6:	77 27       	eor	r23, r23
 4d8:	1e d0       	rcall	.+60     	; 0x516 <__udivmodhi4>
 4da:	80 5d       	subi	r24, 0xD0	; 208
 4dc:	8a 33       	cpi	r24, 0x3A	; 58
 4de:	0c f0       	brlt	.+2      	; 0x4e2 <itoa+0x2a>
 4e0:	89 5d       	subi	r24, 0xD9	; 217
 4e2:	81 93       	st	Z+, r24
 4e4:	cb 01       	movw	r24, r22
 4e6:	00 97       	sbiw	r24, 0x00	; 0
 4e8:	a9 f7       	brne	.-22     	; 0x4d4 <itoa+0x1c>
 4ea:	16 f4       	brtc	.+4      	; 0x4f0 <itoa+0x38>
 4ec:	5d e2       	ldi	r21, 0x2D	; 45
 4ee:	51 93       	st	Z+, r21
 4f0:	10 82       	st	Z, r1
 4f2:	c9 01       	movw	r24, r18
 4f4:	00 c0       	rjmp	.+0      	; 0x4f6 <strrev>

000004f6 <strrev>:
 4f6:	dc 01       	movw	r26, r24
 4f8:	fc 01       	movw	r30, r24
 4fa:	67 2f       	mov	r22, r23
 4fc:	71 91       	ld	r23, Z+
 4fe:	77 23       	and	r23, r23
 500:	e1 f7       	brne	.-8      	; 0x4fa <strrev+0x4>
 502:	32 97       	sbiw	r30, 0x02	; 2
 504:	04 c0       	rjmp	.+8      	; 0x50e <strrev+0x18>
 506:	7c 91       	ld	r23, X
 508:	6d 93       	st	X+, r22
 50a:	70 83       	st	Z, r23
 50c:	62 91       	ld	r22, -Z
 50e:	ae 17       	cp	r26, r30
 510:	bf 07       	cpc	r27, r31
 512:	c8 f3       	brcs	.-14     	; 0x506 <strrev+0x10>
 514:	08 95       	ret

00000516 <__udivmodhi4>:
 516:	aa 1b       	sub	r26, r26
 518:	bb 1b       	sub	r27, r27
 51a:	51 e1       	ldi	r21, 0x11	; 17
 51c:	07 c0       	rjmp	.+14     	; 0x52c <__udivmodhi4_ep>

0000051e <__udivmodhi4_loop>:
 51e:	aa 1f       	adc	r26, r26
 520:	bb 1f       	adc	r27, r27
 522:	a6 17       	cp	r26, r22
 524:	b7 07       	cpc	r27, r23
 526:	10 f0       	brcs	.+4      	; 0x52c <__udivmodhi4_ep>
 528:	a6 1b       	sub	r26, r22
 52a:	b7 0b       	sbc	r27, r23

0000052c <__udivmodhi4_ep>:
 52c:	88 1f       	adc	r24, r24
 52e:	99 1f       	adc	r25, r25
 530:	5a 95       	dec	r21
 532:	a9 f7       	brne	.-22     	; 0x51e <__udivmodhi4_loop>
 534:	80 95       	com	r24
 536:	90 95       	com	r25
 538:	bc 01       	movw	r22, r24
 53a:	cd 01       	movw	r24, r26
 53c:	08 95       	ret

0000053e <_exit>:
 53e:	f8 94       	cli

00000540 <__stop_program>:
 540:	ff cf       	rjmp	.-2      	; 0x540 <__stop_program>
