
demo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000009c6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000116  00800060  000009c6  00000a5a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000001ff  00800176  00800176  00000b70  2**0
                  ALLOC
  3 .stab         00003678  00000000  00000000  00000b70  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000154e  00000000  00000000  000041e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00005736  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	2f c4       	rjmp	.+2142   	; 0x870 <__vector_8>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	16 c1       	rjmp	.+556    	; 0x244 <__vector_11>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	ec c0       	rjmp	.+472    	; 0x1f4 <__vector_13>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	11 e0       	ldi	r17, 0x01	; 1
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e6 ec       	ldi	r30, 0xC6	; 198
  3a:	f9 e0       	ldi	r31, 0x09	; 9
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a6 37       	cpi	r26, 0x76	; 118
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	13 e0       	ldi	r17, 0x03	; 3
  4a:	a6 e7       	ldi	r26, 0x76	; 118
  4c:	b1 e0       	ldi	r27, 0x01	; 1
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a5 37       	cpi	r26, 0x75	; 117
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	40 d4       	rcall	.+2176   	; 0x8da <main>
  5a:	b3 c4       	rjmp	.+2406   	; 0x9c2 <_exit>

0000005c <__bad_interrupt>:
  5c:	00 c0       	rjmp	.+0      	; 0x5e <__vector_default>

0000005e <__vector_default>:

enum { UP, DOWN };


ISR(BADISR_vect)
{
  5e:	1f 92       	push	r1
  60:	0f 92       	push	r0
  62:	0f b6       	in	r0, 0x3f	; 63
  64:	0f 92       	push	r0
  66:	11 24       	eor	r1, r1
    // user code here
}
  68:	0f 90       	pop	r0
  6a:	0f be       	out	0x3f, r0	; 63
  6c:	0f 90       	pop	r0
  6e:	1f 90       	pop	r1
  70:	18 95       	reti

00000072 <ioinit>:

void ioinit() {

USART_Init(51); 
  72:	83 e3       	ldi	r24, 0x33	; 51
  74:	90 e0       	ldi	r25, 0x00	; 0
  76:	49 d0       	rcall	.+146    	; 0x10a <USART_Init>

//Below code may be removed, i believe this was for PWM
//TCCR1B = (TCCR1B & 0xF8) | 0x01;
//TIMSK1 = TIMSK1 | _BV(TOIE1);

initTimer();
  78:	ee d3       	rcall	.+2012   	; 0x856 <initTimer>
USART_Transmit_String("Restarted: "); 
  7a:	81 e6       	ldi	r24, 0x61	; 97
  7c:	90 e0       	ldi	r25, 0x00	; 0
  7e:	a3 d0       	rcall	.+326    	; 0x1c6 <USART_Transmit_String>
initLCD();
  80:	ad d2       	rcall	.+1370   	; 0x5dc <initLCD>
sei ();
  82:	78 94       	sei
  84:	08 95       	ret

00000086 <getBinaryString>:
  86:	e7 e7       	ldi	r30, 0x77	; 119
  88:	f1 e0       	ldi	r31, 0x01	; 1
  8a:	20 e0       	ldi	r18, 0x00	; 0
  8c:	30 e0       	ldi	r19, 0x00	; 0
  8e:	71 e3       	ldi	r23, 0x31	; 49
  90:	60 e2       	ldi	r22, 0x20	; 32
  92:	ac 01       	movw	r20, r24
  94:	02 2e       	mov	r0, r18
  96:	02 c0       	rjmp	.+4      	; 0x9c <getBinaryString+0x16>
  98:	44 0f       	add	r20, r20
  9a:	55 1f       	adc	r21, r21
  9c:	0a 94       	dec	r0
  9e:	e2 f7       	brpl	.-8      	; 0x98 <getBinaryString+0x12>
  a0:	45 2f       	mov	r20, r21
  a2:	40 95       	com	r20
  a4:	44 1f       	adc	r20, r20
  a6:	44 27       	eor	r20, r20
  a8:	44 1f       	adc	r20, r20
  aa:	57 2f       	mov	r21, r23
  ac:	54 1b       	sub	r21, r20
  ae:	df 01       	movw	r26, r30
  b0:	11 97       	sbiw	r26, 0x01	; 1
  b2:	5c 93       	st	X, r21
  b4:	60 83       	st	Z, r22
  b6:	2f 5f       	subi	r18, 0xFF	; 255
  b8:	3f 4f       	sbci	r19, 0xFF	; 255
  ba:	32 96       	adiw	r30, 0x02	; 2
  bc:	20 31       	cpi	r18, 0x10	; 16
  be:	31 05       	cpc	r19, r1
  c0:	41 f7       	brne	.-48     	; 0x92 <getBinaryString+0xc>
  c2:	10 92 96 01 	sts	0x0196, r1
  c6:	86 e7       	ldi	r24, 0x76	; 118
  c8:	91 e0       	ldi	r25, 0x01	; 1
  ca:	08 95       	ret

000000cc <initRxQueue>:
  cc:	ee ed       	ldi	r30, 0xDE	; 222
  ce:	f1 e0       	ldi	r31, 0x01	; 1
  d0:	11 92       	st	Z+, r1
  d2:	82 e0       	ldi	r24, 0x02	; 2
  d4:	e2 34       	cpi	r30, 0x42	; 66
  d6:	f8 07       	cpc	r31, r24
  d8:	d9 f7       	brne	.-10     	; 0xd0 <initRxQueue+0x4>
  da:	10 92 43 02 	sts	0x0243, r1
  de:	10 92 42 02 	sts	0x0242, r1
  e2:	10 92 44 02 	sts	0x0244, r1
  e6:	08 95       	ret

000000e8 <initTxQueue>:
  e8:	10 92 0d 03 	sts	0x030D, r1
  ec:	10 92 0e 03 	sts	0x030E, r1
  f0:	10 92 0f 03 	sts	0x030F, r1
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	80 93 10 03 	sts	0x0310, r24
  fa:	e5 e4       	ldi	r30, 0x45	; 69
  fc:	f2 e0       	ldi	r31, 0x02	; 2
  fe:	11 92       	st	Z+, r1
 100:	83 e0       	ldi	r24, 0x03	; 3
 102:	ed 30       	cpi	r30, 0x0D	; 13
 104:	f8 07       	cpc	r31, r24
 106:	d9 f7       	brne	.-10     	; 0xfe <initTxQueue+0x16>
 108:	08 95       	ret

0000010a <USART_Init>:
 10a:	90 bd       	out	0x20, r25	; 32
 10c:	89 b9       	out	0x09, r24	; 9
 10e:	8a b1       	in	r24, 0x0a	; 10
 110:	88 61       	ori	r24, 0x18	; 24
 112:	8a b9       	out	0x0a, r24	; 10
 114:	8a b1       	in	r24, 0x0a	; 10
 116:	80 6c       	ori	r24, 0xC0	; 192
 118:	8a b9       	out	0x0a, r24	; 10
 11a:	10 92 0d 03 	sts	0x030D, r1
 11e:	10 92 0e 03 	sts	0x030E, r1
 122:	10 92 0f 03 	sts	0x030F, r1
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	80 93 10 03 	sts	0x0310, r24
 12c:	e5 e4       	ldi	r30, 0x45	; 69
 12e:	f2 e0       	ldi	r31, 0x02	; 2
 130:	11 92       	st	Z+, r1
 132:	83 e0       	ldi	r24, 0x03	; 3
 134:	ed 30       	cpi	r30, 0x0D	; 13
 136:	f8 07       	cpc	r31, r24
 138:	d9 f7       	brne	.-10     	; 0x130 <USART_Init+0x26>
 13a:	ee ed       	ldi	r30, 0xDE	; 222
 13c:	f1 e0       	ldi	r31, 0x01	; 1
 13e:	11 92       	st	Z+, r1
 140:	82 e0       	ldi	r24, 0x02	; 2
 142:	e2 34       	cpi	r30, 0x42	; 66
 144:	f8 07       	cpc	r31, r24
 146:	d9 f7       	brne	.-10     	; 0x13e <USART_Init+0x34>
 148:	10 92 43 02 	sts	0x0243, r1
 14c:	10 92 42 02 	sts	0x0242, r1
 150:	10 92 44 02 	sts	0x0244, r1
 154:	08 95       	ret

00000156 <USART_Transmit>:
 156:	5d 9b       	sbis	0x0b, 5	; 11
 158:	fe cf       	rjmp	.-4      	; 0x156 <USART_Transmit>
 15a:	8c b9       	out	0x0c, r24	; 12
 15c:	08 95       	ret

0000015e <printByte>:
 15e:	98 2f       	mov	r25, r24
 160:	92 95       	swap	r25
 162:	9f 70       	andi	r25, 0x0F	; 15
 164:	9a 30       	cpi	r25, 0x0A	; 10
 166:	88 f4       	brcc	.+34     	; 0x18a <printByte+0x2c>
 168:	90 5d       	subi	r25, 0xD0	; 208
 16a:	5d 9b       	sbis	0x0b, 5	; 11
 16c:	fe cf       	rjmp	.-4      	; 0x16a <printByte+0xc>
 16e:	9c b9       	out	0x0c, r25	; 12
 170:	8f 70       	andi	r24, 0x0F	; 15
 172:	8a 30       	cpi	r24, 0x0A	; 10
 174:	28 f4       	brcc	.+10     	; 0x180 <printByte+0x22>
 176:	80 5d       	subi	r24, 0xD0	; 208
 178:	5d 9b       	sbis	0x0b, 5	; 11
 17a:	fe cf       	rjmp	.-4      	; 0x178 <printByte+0x1a>
 17c:	8c b9       	out	0x0c, r24	; 12
 17e:	08 95       	ret
 180:	89 5c       	subi	r24, 0xC9	; 201
 182:	5d 9b       	sbis	0x0b, 5	; 11
 184:	fe cf       	rjmp	.-4      	; 0x182 <printByte+0x24>
 186:	8c b9       	out	0x0c, r24	; 12
 188:	08 95       	ret
 18a:	99 5c       	subi	r25, 0xC9	; 201
 18c:	5d 9b       	sbis	0x0b, 5	; 11
 18e:	fe cf       	rjmp	.-4      	; 0x18c <printByte+0x2e>
 190:	ee cf       	rjmp	.-36     	; 0x16e <printByte+0x10>

00000192 <USART_Transmit_String_P>:
 192:	20 e0       	ldi	r18, 0x00	; 0
 194:	30 e0       	ldi	r19, 0x00	; 0
 196:	fc 01       	movw	r30, r24
 198:	e2 0f       	add	r30, r18
 19a:	f3 1f       	adc	r31, r19
 19c:	e4 91       	lpm	r30, Z
 19e:	ee 23       	and	r30, r30
 1a0:	41 f0       	breq	.+16     	; 0x1b2 <USART_Transmit_String_P+0x20>
 1a2:	5d 9b       	sbis	0x0b, 5	; 11
 1a4:	fe cf       	rjmp	.-4      	; 0x1a2 <USART_Transmit_String_P+0x10>
 1a6:	ec b9       	out	0x0c, r30	; 12
 1a8:	2f 5f       	subi	r18, 0xFF	; 255
 1aa:	3f 4f       	sbci	r19, 0xFF	; 255
 1ac:	24 36       	cpi	r18, 0x64	; 100
 1ae:	31 05       	cpc	r19, r1
 1b0:	91 f7       	brne	.-28     	; 0x196 <USART_Transmit_String_P+0x4>
 1b2:	5d 9b       	sbis	0x0b, 5	; 11
 1b4:	fe cf       	rjmp	.-4      	; 0x1b2 <USART_Transmit_String_P+0x20>
 1b6:	8d e0       	ldi	r24, 0x0D	; 13
 1b8:	8c b9       	out	0x0c, r24	; 12
 1ba:	5d 9b       	sbis	0x0b, 5	; 11
 1bc:	fe cf       	rjmp	.-4      	; 0x1ba <USART_Transmit_String_P+0x28>
 1be:	8a e0       	ldi	r24, 0x0A	; 10
 1c0:	8c b9       	out	0x0c, r24	; 12
 1c2:	08 95       	ret

000001c4 <USART_Transmit_Bytes_P>:
 1c4:	08 95       	ret

000001c6 <USART_Transmit_String>:
 1c6:	fc 01       	movw	r30, r24
 1c8:	20 e0       	ldi	r18, 0x00	; 0
 1ca:	30 e0       	ldi	r19, 0x00	; 0
 1cc:	81 91       	ld	r24, Z+
 1ce:	88 23       	and	r24, r24
 1d0:	41 f0       	breq	.+16     	; 0x1e2 <USART_Transmit_String+0x1c>
 1d2:	5d 9b       	sbis	0x0b, 5	; 11
 1d4:	fe cf       	rjmp	.-4      	; 0x1d2 <USART_Transmit_String+0xc>
 1d6:	8c b9       	out	0x0c, r24	; 12
 1d8:	2f 5f       	subi	r18, 0xFF	; 255
 1da:	3f 4f       	sbci	r19, 0xFF	; 255
 1dc:	24 36       	cpi	r18, 0x64	; 100
 1de:	31 05       	cpc	r19, r1
 1e0:	a9 f7       	brne	.-22     	; 0x1cc <USART_Transmit_String+0x6>
 1e2:	5d 9b       	sbis	0x0b, 5	; 11
 1e4:	fe cf       	rjmp	.-4      	; 0x1e2 <USART_Transmit_String+0x1c>
 1e6:	8d e0       	ldi	r24, 0x0D	; 13
 1e8:	8c b9       	out	0x0c, r24	; 12
 1ea:	5d 9b       	sbis	0x0b, 5	; 11
 1ec:	fe cf       	rjmp	.-4      	; 0x1ea <USART_Transmit_String+0x24>
 1ee:	8a e0       	ldi	r24, 0x0A	; 10
 1f0:	8c b9       	out	0x0c, r24	; 12
 1f2:	08 95       	ret

000001f4 <__vector_13>:
 1f4:	1f 92       	push	r1
 1f6:	0f 92       	push	r0
 1f8:	0f b6       	in	r0, 0x3f	; 63
 1fa:	0f 92       	push	r0
 1fc:	11 24       	eor	r1, r1
 1fe:	8f 93       	push	r24
 200:	9f 93       	push	r25
 202:	ef 93       	push	r30
 204:	ff 93       	push	r31
 206:	f8 94       	cli
 208:	80 91 0e 03 	lds	r24, 0x030E
 20c:	90 91 0d 03 	lds	r25, 0x030D
 210:	89 17       	cp	r24, r25
 212:	70 f0       	brcs	.+28     	; 0x230 <__vector_13+0x3c>
 214:	10 92 0e 03 	sts	0x030E, r1
 218:	10 92 0d 03 	sts	0x030D, r1
 21c:	78 94       	sei
 21e:	ff 91       	pop	r31
 220:	ef 91       	pop	r30
 222:	9f 91       	pop	r25
 224:	8f 91       	pop	r24
 226:	0f 90       	pop	r0
 228:	0f be       	out	0x3f, r0	; 63
 22a:	0f 90       	pop	r0
 22c:	1f 90       	pop	r1
 22e:	18 95       	reti
 230:	e8 2f       	mov	r30, r24
 232:	f0 e0       	ldi	r31, 0x00	; 0
 234:	eb 5b       	subi	r30, 0xBB	; 187
 236:	fd 4f       	sbci	r31, 0xFD	; 253
 238:	90 81       	ld	r25, Z
 23a:	9c b9       	out	0x0c, r25	; 12
 23c:	8f 5f       	subi	r24, 0xFF	; 255
 23e:	80 93 0e 03 	sts	0x030E, r24
 242:	ec cf       	rjmp	.-40     	; 0x21c <__vector_13+0x28>

00000244 <__vector_11>:
 244:	1f 92       	push	r1
 246:	0f 92       	push	r0
 248:	0f b6       	in	r0, 0x3f	; 63
 24a:	0f 92       	push	r0
 24c:	11 24       	eor	r1, r1
 24e:	8f 93       	push	r24
 250:	9f 93       	push	r25
 252:	ef 93       	push	r30
 254:	ff 93       	push	r31
 256:	f8 94       	cli
 258:	80 91 42 02 	lds	r24, 0x0242
 25c:	84 36       	cpi	r24, 0x64	; 100
 25e:	d0 f4       	brcc	.+52     	; 0x294 <__vector_11+0x50>
 260:	90 91 44 02 	lds	r25, 0x0244
 264:	91 30       	cpi	r25, 0x01	; 1
 266:	b1 f0       	breq	.+44     	; 0x294 <__vector_11+0x50>
 268:	9c b1       	in	r25, 0x0c	; 12
 26a:	e8 2f       	mov	r30, r24
 26c:	f0 e0       	ldi	r31, 0x00	; 0
 26e:	e2 52       	subi	r30, 0x22	; 34
 270:	fe 4f       	sbci	r31, 0xFE	; 254
 272:	90 83       	st	Z, r25
 274:	9c b9       	out	0x0c, r25	; 12
 276:	90 81       	ld	r25, Z
 278:	99 23       	and	r25, r25
 27a:	21 f0       	breq	.+8      	; 0x284 <__vector_11+0x40>
 27c:	9d 30       	cpi	r25, 0x0D	; 13
 27e:	11 f0       	breq	.+4      	; 0x284 <__vector_11+0x40>
 280:	9a 30       	cpi	r25, 0x0A	; 10
 282:	21 f4       	brne	.+8      	; 0x28c <__vector_11+0x48>
 284:	10 82       	st	Z, r1
 286:	91 e0       	ldi	r25, 0x01	; 1
 288:	90 93 44 02 	sts	0x0244, r25
 28c:	8f 5f       	subi	r24, 0xFF	; 255
 28e:	80 93 42 02 	sts	0x0242, r24
 292:	02 c0       	rjmp	.+4      	; 0x298 <__vector_11+0x54>
 294:	8c b1       	in	r24, 0x0c	; 12
 296:	8c b9       	out	0x0c, r24	; 12
 298:	78 94       	sei
 29a:	ff 91       	pop	r31
 29c:	ef 91       	pop	r30
 29e:	9f 91       	pop	r25
 2a0:	8f 91       	pop	r24
 2a2:	0f 90       	pop	r0
 2a4:	0f be       	out	0x3f, r0	; 63
 2a6:	0f 90       	pop	r0
 2a8:	1f 90       	pop	r1
 2aa:	18 95       	reti

000002ac <USART_Transmit_String2>:
 2ac:	f8 94       	cli
 2ae:	60 91 0d 03 	lds	r22, 0x030D
 2b2:	61 11       	cpse	r22, r1
 2b4:	17 c0       	rjmp	.+46     	; 0x2e4 <USART_Transmit_String2+0x38>
 2b6:	24 e2       	ldi	r18, 0x24	; 36
 2b8:	2c b9       	out	0x0c, r18	; 12
 2ba:	fc 01       	movw	r30, r24
 2bc:	a5 e4       	ldi	r26, 0x45	; 69
 2be:	b2 e0       	ldi	r27, 0x02	; 2
 2c0:	80 e0       	ldi	r24, 0x00	; 0
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	08 c0       	rjmp	.+16     	; 0x2d6 <USART_Transmit_String2+0x2a>
 2c6:	2d 93       	st	X+, r18
 2c8:	87 3c       	cpi	r24, 0xC7	; 199
 2ca:	91 05       	cpc	r25, r1
 2cc:	3c f4       	brge	.+14     	; 0x2dc <USART_Transmit_String2+0x30>
 2ce:	01 96       	adiw	r24, 0x01	; 1
 2d0:	84 36       	cpi	r24, 0x64	; 100
 2d2:	91 05       	cpc	r25, r1
 2d4:	41 f1       	breq	.+80     	; 0x326 <USART_Transmit_String2+0x7a>
 2d6:	21 91       	ld	r18, Z+
 2d8:	21 11       	cpse	r18, r1
 2da:	f5 cf       	rjmp	.-22     	; 0x2c6 <USART_Transmit_String2+0x1a>
 2dc:	80 93 0d 03 	sts	0x030D, r24
 2e0:	78 94       	sei
 2e2:	08 95       	ret
 2e4:	2f ef       	ldi	r18, 0xFF	; 255
 2e6:	26 0f       	add	r18, r22
 2e8:	27 3c       	cpi	r18, 0xC7	; 199
 2ea:	d0 f7       	brcc	.-12     	; 0x2e0 <USART_Transmit_String2+0x34>
 2ec:	fc 01       	movw	r30, r24
 2ee:	46 2f       	mov	r20, r22
 2f0:	50 e0       	ldi	r21, 0x00	; 0
 2f2:	da 01       	movw	r26, r20
 2f4:	ab 5b       	subi	r26, 0xBB	; 187
 2f6:	bd 4f       	sbci	r27, 0xFD	; 253
 2f8:	27 ec       	ldi	r18, 0xC7	; 199
 2fa:	30 e0       	ldi	r19, 0x00	; 0
 2fc:	24 1b       	sub	r18, r20
 2fe:	35 0b       	sbc	r19, r21
 300:	80 e0       	ldi	r24, 0x00	; 0
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	08 c0       	rjmp	.+16     	; 0x316 <USART_Transmit_String2+0x6a>
 306:	4d 93       	st	X+, r20
 308:	82 17       	cp	r24, r18
 30a:	93 07       	cpc	r25, r19
 30c:	39 f0       	breq	.+14     	; 0x31c <USART_Transmit_String2+0x70>
 30e:	01 96       	adiw	r24, 0x01	; 1
 310:	84 36       	cpi	r24, 0x64	; 100
 312:	91 05       	cpc	r25, r1
 314:	51 f0       	breq	.+20     	; 0x32a <USART_Transmit_String2+0x7e>
 316:	41 91       	ld	r20, Z+
 318:	41 11       	cpse	r20, r1
 31a:	f5 cf       	rjmp	.-22     	; 0x306 <USART_Transmit_String2+0x5a>
 31c:	68 0f       	add	r22, r24
 31e:	60 93 0d 03 	sts	0x030D, r22
 322:	78 94       	sei
 324:	08 95       	ret
 326:	84 e6       	ldi	r24, 0x64	; 100
 328:	d9 cf       	rjmp	.-78     	; 0x2dc <USART_Transmit_String2+0x30>
 32a:	84 e6       	ldi	r24, 0x64	; 100
 32c:	f7 cf       	rjmp	.-18     	; 0x31c <USART_Transmit_String2+0x70>

0000032e <USART_Receive_String>:
 32e:	e8 ea       	ldi	r30, 0xA8	; 168
 330:	f1 e0       	ldi	r31, 0x01	; 1
 332:	5f 9b       	sbis	0x0b, 7	; 11
 334:	fe cf       	rjmp	.-4      	; 0x332 <USART_Receive_String+0x4>
 336:	cf 01       	movw	r24, r30
 338:	88 5a       	subi	r24, 0xA8	; 168
 33a:	91 40       	sbci	r25, 0x01	; 1
 33c:	2c b1       	in	r18, 0x0c	; 12
 33e:	20 83       	st	Z, r18
 340:	5d 9b       	sbis	0x0b, 5	; 11
 342:	fe cf       	rjmp	.-4      	; 0x340 <USART_Receive_String+0x12>
 344:	2c b9       	out	0x0c, r18	; 12
 346:	21 91       	ld	r18, Z+
 348:	22 23       	and	r18, r18
 34a:	59 f0       	breq	.+22     	; 0x362 <USART_Receive_String+0x34>
 34c:	2d 30       	cpi	r18, 0x0D	; 13
 34e:	49 f0       	breq	.+18     	; 0x362 <USART_Receive_String+0x34>
 350:	2a 30       	cpi	r18, 0x0A	; 10
 352:	39 f0       	breq	.+14     	; 0x362 <USART_Receive_String+0x34>
 354:	81 e0       	ldi	r24, 0x01	; 1
 356:	e9 3d       	cpi	r30, 0xD9	; 217
 358:	f8 07       	cpc	r31, r24
 35a:	59 f7       	brne	.-42     	; 0x332 <USART_Receive_String+0x4>
 35c:	10 92 d9 01 	sts	0x01D9, r1
 360:	04 c0       	rjmp	.+8      	; 0x36a <USART_Receive_String+0x3c>
 362:	fc 01       	movw	r30, r24
 364:	e8 55       	subi	r30, 0x58	; 88
 366:	fe 4f       	sbci	r31, 0xFE	; 254
 368:	10 82       	st	Z, r1
 36a:	8e ee       	ldi	r24, 0xEE	; 238
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	2b df       	rcall	.-426    	; 0x1c6 <USART_Transmit_String>
 370:	88 ea       	ldi	r24, 0xA8	; 168
 372:	91 e0       	ldi	r25, 0x01	; 1
 374:	28 df       	rcall	.-432    	; 0x1c6 <USART_Transmit_String>
 376:	82 e0       	ldi	r24, 0x02	; 2
 378:	91 e0       	ldi	r25, 0x01	; 1
 37a:	25 df       	rcall	.-438    	; 0x1c6 <USART_Transmit_String>
 37c:	88 ea       	ldi	r24, 0xA8	; 168
 37e:	91 e0       	ldi	r25, 0x01	; 1
 380:	08 95       	ret

00000382 <USART_Receive_String2>:
 382:	f8 94       	cli
 384:	20 91 44 02 	lds	r18, 0x0244
 388:	22 23       	and	r18, r18
 38a:	09 f1       	breq	.+66     	; 0x3ce <USART_Receive_String2+0x4c>
 38c:	20 91 42 02 	lds	r18, 0x0242
 390:	22 23       	and	r18, r18
 392:	09 f1       	breq	.+66     	; 0x3d6 <USART_Receive_String2+0x54>
 394:	16 16       	cp	r1, r22
 396:	17 06       	cpc	r1, r23
 398:	f4 f4       	brge	.+60     	; 0x3d6 <USART_Receive_String2+0x54>
 39a:	ae ed       	ldi	r26, 0xDE	; 222
 39c:	b1 e0       	ldi	r27, 0x01	; 1
 39e:	fc 01       	movw	r30, r24
 3a0:	80 e0       	ldi	r24, 0x00	; 0
 3a2:	90 e0       	ldi	r25, 0x00	; 0
 3a4:	03 c0       	rjmp	.+6      	; 0x3ac <USART_Receive_String2+0x2a>
 3a6:	86 17       	cp	r24, r22
 3a8:	97 07       	cpc	r25, r23
 3aa:	49 f0       	breq	.+18     	; 0x3be <USART_Receive_String2+0x3c>
 3ac:	2d 91       	ld	r18, X+
 3ae:	21 93       	st	Z+, r18
 3b0:	01 96       	adiw	r24, 0x01	; 1
 3b2:	20 91 42 02 	lds	r18, 0x0242
 3b6:	30 e0       	ldi	r19, 0x00	; 0
 3b8:	82 17       	cp	r24, r18
 3ba:	93 07       	cpc	r25, r19
 3bc:	a4 f3       	brlt	.-24     	; 0x3a6 <USART_Receive_String2+0x24>
 3be:	10 92 42 02 	sts	0x0242, r1
 3c2:	10 92 43 02 	sts	0x0243, r1
 3c6:	10 92 44 02 	sts	0x0244, r1
 3ca:	78 94       	sei
 3cc:	08 95       	ret
 3ce:	80 e0       	ldi	r24, 0x00	; 0
 3d0:	90 e0       	ldi	r25, 0x00	; 0
 3d2:	78 94       	sei
 3d4:	08 95       	ret
 3d6:	80 e0       	ldi	r24, 0x00	; 0
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	f1 cf       	rjmp	.-30     	; 0x3be <USART_Receive_String2+0x3c>

000003dc <initTimedTasks>:
    int recurrence;
} scheduledItems[MAX_TASKS];



void initTimedTasks() {
 3dc:	e1 e1       	ldi	r30, 0x11	; 17
 3de:	f3 e0       	ldi	r31, 0x03	; 3
    int i = 0;
    for (i=0; i < MAX_TASKS; i++) {
        scheduledItems[i].empty = 1;
 3e0:	81 e0       	ldi	r24, 0x01	; 1
 3e2:	90 e0       	ldi	r25, 0x00	; 0
 3e4:	91 83       	std	Z+1, r25	; 0x01
 3e6:	80 83       	st	Z, r24
        scheduledItems[i].cb = 0;
 3e8:	17 82       	std	Z+7, r1	; 0x07
 3ea:	16 82       	std	Z+6, r1	; 0x06
        scheduledItems[i].timestamp[0] = 0;
 3ec:	13 82       	std	Z+3, r1	; 0x03
 3ee:	12 82       	std	Z+2, r1	; 0x02
        scheduledItems[i].timestamp[1] = 0;
 3f0:	15 82       	std	Z+5, r1	; 0x05
 3f2:	14 82       	std	Z+4, r1	; 0x04
 3f4:	3a 96       	adiw	r30, 0x0a	; 10



void initTimedTasks() {
    int i = 0;
    for (i=0; i < MAX_TASKS; i++) {
 3f6:	23 e0       	ldi	r18, 0x03	; 3
 3f8:	e5 37       	cpi	r30, 0x75	; 117
 3fa:	f2 07       	cpc	r31, r18
 3fc:	99 f7       	brne	.-26     	; 0x3e4 <initTimedTasks+0x8>
        scheduledItems[i].empty = 1;
        scheduledItems[i].cb = 0;
        scheduledItems[i].timestamp[0] = 0;
        scheduledItems[i].timestamp[1] = 0;
    }
}
 3fe:	08 95       	ret

00000400 <resetAllTimers>:

int resetAllTimers(int x)  {
    int i;
    cli();
 400:	f8 94       	cli
    timestamp[0] = 0;
 402:	10 92 db 01 	sts	0x01DB, r1
 406:	10 92 da 01 	sts	0x01DA, r1
    timestamp[1] = 0;
 40a:	10 92 dd 01 	sts	0x01DD, r1
 40e:	10 92 dc 01 	sts	0x01DC, r1
 412:	e3 e1       	ldi	r30, 0x13	; 19
 414:	f3 e0       	ldi	r31, 0x03	; 3
    for(i=0; i < MAX_TASKS; i++) {
        scheduledItems[i].timestamp[0] = 0;
 416:	11 82       	std	Z+1, r1	; 0x01
 418:	10 82       	st	Z, r1
        scheduledItems[i].timestamp[1] = 0;
 41a:	13 82       	std	Z+3, r1	; 0x03
 41c:	12 82       	std	Z+2, r1	; 0x02
 41e:	3a 96       	adiw	r30, 0x0a	; 10
int resetAllTimers(int x)  {
    int i;
    cli();
    timestamp[0] = 0;
    timestamp[1] = 0;
    for(i=0; i < MAX_TASKS; i++) {
 420:	83 e0       	ldi	r24, 0x03	; 3
 422:	e7 37       	cpi	r30, 0x77	; 119
 424:	f8 07       	cpc	r31, r24
 426:	b9 f7       	brne	.-18     	; 0x416 <resetAllTimers+0x16>
        scheduledItems[i].timestamp[0] = 0;
        scheduledItems[i].timestamp[1] = 0;
    }
    sei();
 428:	78 94       	sei
}
 42a:	08 95       	ret

0000042c <repeat>:

void repeat(int ms, tTimedCallBack cb) {
 42c:	e1 e1       	ldi	r30, 0x11	; 17
 42e:	f3 e0       	ldi	r31, 0x03	; 3
int i = 0;

    //add scheduled item to the queue
    for (i = 0; i < MAX_TASKS; i++) {
 430:	20 e0       	ldi	r18, 0x00	; 0
 432:	30 e0       	ldi	r19, 0x00	; 0
        if(scheduledItems[i].empty) {
 434:	40 81       	ld	r20, Z
 436:	51 81       	ldd	r21, Z+1	; 0x01
 438:	45 2b       	or	r20, r21
 43a:	39 f4       	brne	.+14     	; 0x44a <repeat+0x1e>

void repeat(int ms, tTimedCallBack cb) {
int i = 0;

    //add scheduled item to the queue
    for (i = 0; i < MAX_TASKS; i++) {
 43c:	2f 5f       	subi	r18, 0xFF	; 255
 43e:	3f 4f       	sbci	r19, 0xFF	; 255
 440:	3a 96       	adiw	r30, 0x0a	; 10
 442:	2a 30       	cpi	r18, 0x0A	; 10
 444:	31 05       	cpc	r19, r1
 446:	b1 f7       	brne	.-20     	; 0x434 <repeat+0x8>
 448:	08 95       	ret
        if(scheduledItems[i].empty) {
            cli();
 44a:	f8 94       	cli
            scheduledItems[i].timestamp[0] = timestamp[0];
 44c:	f9 01       	movw	r30, r18
 44e:	ee 0f       	add	r30, r30
 450:	ff 1f       	adc	r31, r31
 452:	a9 01       	movw	r20, r18
 454:	44 0f       	add	r20, r20
 456:	55 1f       	adc	r21, r21
 458:	44 0f       	add	r20, r20
 45a:	55 1f       	adc	r21, r21
 45c:	44 0f       	add	r20, r20
 45e:	55 1f       	adc	r21, r21
 460:	e4 0f       	add	r30, r20
 462:	f5 1f       	adc	r31, r21
 464:	ef 5e       	subi	r30, 0xEF	; 239
 466:	fc 4f       	sbci	r31, 0xFC	; 252
 468:	40 91 da 01 	lds	r20, 0x01DA
 46c:	50 91 db 01 	lds	r21, 0x01DB
 470:	53 83       	std	Z+3, r21	; 0x03
 472:	42 83       	std	Z+2, r20	; 0x02
            scheduledItems[i].timestamp[1] = timestamp[1];
 474:	40 91 dc 01 	lds	r20, 0x01DC
 478:	50 91 dd 01 	lds	r21, 0x01DD
 47c:	55 83       	std	Z+5, r21	; 0x05
 47e:	44 83       	std	Z+4, r20	; 0x04
            sei();
 480:	78 94       	sei
            scheduledItems[i].timestamp[0] += ms;
 482:	f9 01       	movw	r30, r18
 484:	ee 0f       	add	r30, r30
 486:	ff 1f       	adc	r31, r31
 488:	22 0f       	add	r18, r18
 48a:	33 1f       	adc	r19, r19
 48c:	22 0f       	add	r18, r18
 48e:	33 1f       	adc	r19, r19
 490:	22 0f       	add	r18, r18
 492:	33 1f       	adc	r19, r19
 494:	e2 0f       	add	r30, r18
 496:	f3 1f       	adc	r31, r19
 498:	ef 5e       	subi	r30, 0xEF	; 239
 49a:	fc 4f       	sbci	r31, 0xFC	; 252
 49c:	22 81       	ldd	r18, Z+2	; 0x02
 49e:	33 81       	ldd	r19, Z+3	; 0x03
 4a0:	28 0f       	add	r18, r24
 4a2:	39 1f       	adc	r19, r25
 4a4:	33 83       	std	Z+3, r19	; 0x03
 4a6:	22 83       	std	Z+2, r18	; 0x02
            scheduledItems[i].recurrence = ms;
 4a8:	91 87       	std	Z+9, r25	; 0x09
 4aa:	80 87       	std	Z+8, r24	; 0x08
            scheduledItems[i].cb = cb;
 4ac:	77 83       	std	Z+7, r23	; 0x07
 4ae:	66 83       	std	Z+6, r22	; 0x06
            
            scheduledItems[i].empty = 0;
 4b0:	11 82       	std	Z+1, r1	; 0x01
 4b2:	10 82       	st	Z, r1
            break;
 4b4:	08 95       	ret

000004b6 <invokeScheduledItem>:
        }
    }
}

void invokeScheduledItem() {
 4b6:	0f 93       	push	r16
 4b8:	1f 93       	push	r17
 4ba:	cf 93       	push	r28
 4bc:	df 93       	push	r29
    int ts[2], i;
    char bytes[30];
    cli();
 4be:	f8 94       	cli
            ts[0] = timestamp[0];
 4c0:	00 91 da 01 	lds	r16, 0x01DA
 4c4:	10 91 db 01 	lds	r17, 0x01DB
            ts[1] = timestamp[1];
    sei();
 4c8:	78 94       	sei
 4ca:	c1 e1       	ldi	r28, 0x11	; 17
 4cc:	d3 e0       	ldi	r29, 0x03	; 3
    
    //retrieve scheduled item from queue and mark it free for reuse
    for (i = 0; i < MAX_TASKS; i++) {
        if(!scheduledItems[i].empty) {
 4ce:	88 81       	ld	r24, Y
 4d0:	99 81       	ldd	r25, Y+1	; 0x01
 4d2:	89 2b       	or	r24, r25
 4d4:	a1 f4       	brne	.+40     	; 0x4fe <invokeScheduledItem+0x48>
            if(ts[0] > scheduledItems[i].timestamp[0]) {
 4d6:	2a 81       	ldd	r18, Y+2	; 0x02
 4d8:	3b 81       	ldd	r19, Y+3	; 0x03
 4da:	20 17       	cp	r18, r16
 4dc:	31 07       	cpc	r19, r17
 4de:	7c f4       	brge	.+30     	; 0x4fe <invokeScheduledItem+0x48>
                /*sprintf(bytes,"%02x%02x: Thr: %02d, CB: %04x\r\n", timestamp[1], timestamp[0], i, scheduledItems[i].cb);
                USART_Transmit_String2(bytes);*/
             if(scheduledItems[i].cb != 0) {
 4e0:	ee 81       	ldd	r30, Y+6	; 0x06
 4e2:	ff 81       	ldd	r31, Y+7	; 0x07
 4e4:	30 97       	sbiw	r30, 0x00	; 0
 4e6:	29 f0       	breq	.+10     	; 0x4f2 <invokeScheduledItem+0x3c>
                (*scheduledItems[i].cb)(0);
 4e8:	80 e0       	ldi	r24, 0x00	; 0
 4ea:	90 e0       	ldi	r25, 0x00	; 0
 4ec:	09 95       	icall
 4ee:	2a 81       	ldd	r18, Y+2	; 0x02
 4f0:	3b 81       	ldd	r19, Y+3	; 0x03
            }
            scheduledItems[i].timestamp[0] += scheduledItems[i].recurrence;
 4f2:	88 85       	ldd	r24, Y+8	; 0x08
 4f4:	99 85       	ldd	r25, Y+9	; 0x09
 4f6:	82 0f       	add	r24, r18
 4f8:	93 1f       	adc	r25, r19
 4fa:	9b 83       	std	Y+3, r25	; 0x03
 4fc:	8a 83       	std	Y+2, r24	; 0x02
 4fe:	2a 96       	adiw	r28, 0x0a	; 10
            ts[0] = timestamp[0];
            ts[1] = timestamp[1];
    sei();
    
    //retrieve scheduled item from queue and mark it free for reuse
    for (i = 0; i < MAX_TASKS; i++) {
 500:	83 e0       	ldi	r24, 0x03	; 3
 502:	c5 37       	cpi	r28, 0x75	; 117
 504:	d8 07       	cpc	r29, r24
 506:	19 f7       	brne	.-58     	; 0x4ce <invokeScheduledItem+0x18>
            }
            scheduledItems[i].timestamp[0] += scheduledItems[i].recurrence;
            }                           
        }
    }
}
 508:	df 91       	pop	r29
 50a:	cf 91       	pop	r28
 50c:	1f 91       	pop	r17
 50e:	0f 91       	pop	r16
 510:	08 95       	ret

00000512 <doOnce>:

void doOnce( int ms, tTimedCallBack cb) {
 512:	08 95       	ret

00000514 <wait>:
    // to schedule a callback to be invoked after given seconds from now
}

void wait(int ms) {
unsigned int ts[2], t[2];
    cli();
 514:	f8 94       	cli
            ts[0] = timestamp[0];
 516:	20 91 da 01 	lds	r18, 0x01DA
 51a:	30 91 db 01 	lds	r19, 0x01DB
            ts[1] = timestamp[1];
 51e:	40 91 dc 01 	lds	r20, 0x01DC
 522:	50 91 dd 01 	lds	r21, 0x01DD
    sei();
 526:	78 94       	sei
    if((0xFFFF - ts[0]) < ms) {
 528:	b9 01       	movw	r22, r18
 52a:	60 95       	com	r22
 52c:	70 95       	com	r23
 52e:	68 17       	cp	r22, r24
 530:	79 07       	cpc	r23, r25
 532:	10 f4       	brcc	.+4      	; 0x538 <wait+0x24>
        ts[1] += 1;
 534:	4f 5f       	subi	r20, 0xFF	; 255
 536:	5f 4f       	sbci	r21, 0xFF	; 255
    } 
    ts[0] += ms;
 538:	82 0f       	add	r24, r18
 53a:	93 1f       	adc	r25, r19
	...
 while(1) {
    asm("nop");
    asm("nop");
    asm("nop");
    asm("nop");
    cli();
 544:	f8 94       	cli
            t[0] = timestamp[0];
 546:	60 91 da 01 	lds	r22, 0x01DA
 54a:	70 91 db 01 	lds	r23, 0x01DB
            t[1] = timestamp[1];
 54e:	20 91 dc 01 	lds	r18, 0x01DC
 552:	30 91 dd 01 	lds	r19, 0x01DD
    sei();
 556:	78 94       	sei
    if(ts[1] > t[1]) {
 558:	24 17       	cp	r18, r20
 55a:	35 07       	cpc	r19, r21
 55c:	78 f3       	brcs	.-34     	; 0x53c <wait+0x28>
    } else if(ts[1] == t[1]) {
 55e:	24 17       	cp	r18, r20
 560:	35 07       	cpc	r19, r21
 562:	21 f0       	breq	.+8      	; 0x56c <wait+0x58>
        if(ts[0] > t[0]) {

        } else {
            break; //time up
        }
    } else if(ts[1] < t[1]) {
 564:	42 17       	cp	r20, r18
 566:	53 07       	cpc	r21, r19
 568:	48 f7       	brcc	.-46     	; 0x53c <wait+0x28>
 56a:	08 95       	ret
            t[0] = timestamp[0];
            t[1] = timestamp[1];
    sei();
    if(ts[1] > t[1]) {
    } else if(ts[1] == t[1]) {
        if(ts[0] > t[0]) {
 56c:	68 17       	cp	r22, r24
 56e:	79 07       	cpc	r23, r25
 570:	28 f3       	brcs	.-54     	; 0x53c <wait+0x28>
 572:	08 95       	ret

00000574 <sendShClockEdge>:
}


void sendShClockEdge(){
    char cmds[10];
  PORTD = PORTD & (~ _BV(SR_SHCP));
 574:	93 98       	cbi	0x12, 3	; 18
  USART_Transmit_String("Sh-Low");  
    while(USART_Receive_String(cmds, 30) <=0)
        asm("nop");
  #endif

  PORTD = PORTD | _BV(SR_SHCP);
 576:	93 9a       	sbi	0x12, 3	; 18
  #if SINGLE_STEP_BIT_LCD  
  USART_Transmit_String("Sh-High");  
    while(USART_Receive_String(cmds, 30) <=0)
        asm("nop");
  #endif
  PORTD = PORTD & (~ _BV(SR_SHCP));
 578:	93 98       	cbi	0x12, 3	; 18
 57a:	08 95       	ret

0000057c <sendStClockEdge>:
        asm("nop");
  #endif
    }
void sendStClockEdge(){
    char cmds[10];
  PORTD = PORTD & (~ _BV(SR_STCP));
 57c:	94 98       	cbi	0x12, 4	; 18
  #if SINGLE_STEP_BIT_LCD  
  USART_Transmit_String("St-Low");
    while(USART_Receive_String(cmds, 30) <=0)
        asm("nop");
  #endif
  PORTD = PORTD | _BV(SR_STCP);
 57e:	94 9a       	sbi	0x12, 4	; 18
  #if SINGLE_STEP_BIT_LCD  
    while(USART_Receive_String(cmds, 30) <=0)
        asm("nop");
  USART_Transmit_String("St-High");
  #endif
  PORTD = PORTD & (~ _BV(SR_STCP));
 580:	94 98       	cbi	0x12, 4	; 18
 582:	08 95       	ret

00000584 <enableLCD>:
        asm("nop");
  #endif
}
void enableLCD(int delay) {
int i;
  PORTD = PORTD | _BV(LCD_EN);
 584:	95 9a       	sbi	0x12, 5	; 18
 USART_Transmit_String("Check LCD Enable - High");
 586:	85 e0       	ldi	r24, 0x05	; 5
 588:	91 e0       	ldi	r25, 0x01	; 1
 58a:	1d de       	rcall	.-966    	; 0x1c6 <USART_Transmit_String>
  //wait(1000);/* is it required??*/
  PORTD = PORTD & (~ _BV(LCD_EN));
 58c:	95 98       	cbi	0x12, 5	; 18
 USART_Transmit_String("Check LCD Enable - LOW");
 58e:	8d e1       	ldi	r24, 0x1D	; 29
 590:	91 e0       	ldi	r25, 0x01	; 1
 592:	19 de       	rcall	.-974    	; 0x1c6 <USART_Transmit_String>
  wait(1); /*is it required, may be to give time for data to 
 594:	81 e0       	ldi	r24, 0x01	; 1
 596:	90 e0       	ldi	r25, 0x00	; 0
 598:	bd cf       	rjmp	.-134    	; 0x514 <wait>

0000059a <sendDataToLCD>:
    char cmds[10];
  #if SINGLE_STEP_LCD
    sprintf(cmds, "%02x\r\n", data);
    USART_Transmit_String(cmds);
  #endif
    data = data << 1;
 59a:	88 0f       	add	r24, r24
 59c:	a8 2f       	mov	r26, r24
 59e:	b0 e0       	ldi	r27, 0x00	; 0
 5a0:	27 e0       	ldi	r18, 0x07	; 7
 5a2:	30 e0       	ldi	r19, 0x00	; 0
    for(i=0;i<8;i++) { 
    /* though only 4bits are relevant, lets do it all */
      /* extract bit - highest bit first on shift, 
      it goes to MSB, after 8 shifts */
      bit = data & (1 << (7-i));
 5a4:	e1 e0       	ldi	r30, 0x01	; 1
 5a6:	f0 e0       	ldi	r31, 0x00	; 0
 5a8:	07 c0       	rjmp	.+14     	; 0x5b8 <sendDataToLCD+0x1e>

      if(bit) {
        PORTD = PORTD | _BV(SR_DS);
 5aa:	92 9a       	sbi	0x12, 2	; 18
}


void sendShClockEdge(){
    char cmds[10];
  PORTD = PORTD & (~ _BV(SR_SHCP));
 5ac:	93 98       	cbi	0x12, 3	; 18
  USART_Transmit_String("Sh-Low");  
    while(USART_Receive_String(cmds, 30) <=0)
        asm("nop");
  #endif

  PORTD = PORTD | _BV(SR_SHCP);
 5ae:	93 9a       	sbi	0x12, 3	; 18
  #if SINGLE_STEP_BIT_LCD  
  USART_Transmit_String("Sh-High");  
    while(USART_Receive_String(cmds, 30) <=0)
        asm("nop");
  #endif
  PORTD = PORTD & (~ _BV(SR_SHCP));
 5b0:	93 98       	cbi	0x12, 3	; 18
 5b2:	21 50       	subi	r18, 0x01	; 1
 5b4:	31 09       	sbc	r19, r1
 5b6:	68 f0       	brcs	.+26     	; 0x5d2 <sendDataToLCD+0x38>
    data = data << 1;
    for(i=0;i<8;i++) { 
    /* though only 4bits are relevant, lets do it all */
      /* extract bit - highest bit first on shift, 
      it goes to MSB, after 8 shifts */
      bit = data & (1 << (7-i));
 5b8:	af 01       	movw	r20, r30
 5ba:	02 2e       	mov	r0, r18
 5bc:	02 c0       	rjmp	.+4      	; 0x5c2 <sendDataToLCD+0x28>
 5be:	44 0f       	add	r20, r20
 5c0:	55 1f       	adc	r21, r21
 5c2:	0a 94       	dec	r0
 5c4:	e2 f7       	brpl	.-8      	; 0x5be <sendDataToLCD+0x24>
 5c6:	4a 23       	and	r20, r26
 5c8:	5b 23       	and	r21, r27

      if(bit) {
 5ca:	45 2b       	or	r20, r21
 5cc:	71 f7       	brne	.-36     	; 0x5aa <sendDataToLCD+0x10>
      }
      else {
        #if SINGLE_STEP_BIT_LCD
        USART_Transmit_String("0");
      #endif
        PORTD = PORTD & (~ _BV(SR_DS));    
 5ce:	92 98       	cbi	0x12, 2	; 18
 5d0:	ed cf       	rjmp	.-38     	; 0x5ac <sendDataToLCD+0x12>
        asm("nop");
  #endif
    }
void sendStClockEdge(){
    char cmds[10];
  PORTD = PORTD & (~ _BV(SR_STCP));
 5d2:	94 98       	cbi	0x12, 4	; 18
  #if SINGLE_STEP_BIT_LCD  
  USART_Transmit_String("St-Low");
    while(USART_Receive_String(cmds, 30) <=0)
        asm("nop");
  #endif
  PORTD = PORTD | _BV(SR_STCP);
 5d4:	94 9a       	sbi	0x12, 4	; 18
  #if SINGLE_STEP_BIT_LCD  
    while(USART_Receive_String(cmds, 30) <=0)
        asm("nop");
  USART_Transmit_String("St-High");
  #endif
  PORTD = PORTD & (~ _BV(SR_STCP));
 5d6:	94 98       	cbi	0x12, 4	; 18
    }
    
    /* now move out data to output register */
    sendStClockEdge();
    /* now let it be registered by LCD */
    enableLCD(delay);
 5d8:	cb 01       	movw	r24, r22
 5da:	d4 cf       	rjmp	.-88     	; 0x584 <enableLCD>

000005dc <initLCD>:

#define SINGLE_STEP_BIT_LCD 0
#define SINGLE_STEP_LCD 0
void initLCD() {
    int i;
  DDRD = DDRD | _BV(3) | _BV(4) |_BV(5) |_BV(2) ;
 5dc:	81 b3       	in	r24, 0x11	; 17
 5de:	8c 63       	ori	r24, 0x3C	; 60
 5e0:	81 bb       	out	0x11, r24	; 17
  sendDataToLCD(0x03,LCD_DELAY);
 5e2:	61 e0       	ldi	r22, 0x01	; 1
 5e4:	70 e0       	ldi	r23, 0x00	; 0
 5e6:	83 e0       	ldi	r24, 0x03	; 3
 5e8:	d8 df       	rcall	.-80     	; 0x59a <sendDataToLCD>
  USART_Transmit_String("First init");
 5ea:	84 e3       	ldi	r24, 0x34	; 52
 5ec:	91 e0       	ldi	r25, 0x01	; 1
 5ee:	eb dd       	rcall	.-1066   	; 0x1c6 <USART_Transmit_String>
  sendDataToLCD(0x03,LCD_DELAY);
 5f0:	61 e0       	ldi	r22, 0x01	; 1
 5f2:	70 e0       	ldi	r23, 0x00	; 0
 5f4:	83 e0       	ldi	r24, 0x03	; 3
 5f6:	d1 df       	rcall	.-94     	; 0x59a <sendDataToLCD>
  USART_Transmit_String("Second init");
 5f8:	8f e3       	ldi	r24, 0x3F	; 63
 5fa:	91 e0       	ldi	r25, 0x01	; 1
 5fc:	e4 dd       	rcall	.-1080   	; 0x1c6 <USART_Transmit_String>
  sendDataToLCD(0x03,LCD_DELAY);
 5fe:	61 e0       	ldi	r22, 0x01	; 1
 600:	70 e0       	ldi	r23, 0x00	; 0
 602:	83 e0       	ldi	r24, 0x03	; 3
 604:	ca df       	rcall	.-108    	; 0x59a <sendDataToLCD>
  USART_Transmit_String("Third init");
 606:	8b e4       	ldi	r24, 0x4B	; 75
 608:	91 e0       	ldi	r25, 0x01	; 1
 60a:	dd dd       	rcall	.-1094   	; 0x1c6 <USART_Transmit_String>
 60c:	88 ee       	ldi	r24, 0xE8	; 232
 60e:	93 e0       	ldi	r25, 0x03	; 3
  for(i=0; i < 1000; i++) {
    asm("nop");
 610:	00 00       	nop
 612:	01 97       	sbiw	r24, 0x01	; 1
  USART_Transmit_String("First init");
  sendDataToLCD(0x03,LCD_DELAY);
  USART_Transmit_String("Second init");
  sendDataToLCD(0x03,LCD_DELAY);
  USART_Transmit_String("Third init");
  for(i=0; i < 1000; i++) {
 614:	00 97       	sbiw	r24, 0x00	; 0
 616:	e1 f7       	brne	.-8      	; 0x610 <initLCD+0x34>
    asm("nop");
  }

  /* Set 4-bit interface */
  sendDataToLCD(0x02,LCD_DELAY);
 618:	61 e0       	ldi	r22, 0x01	; 1
 61a:	70 e0       	ldi	r23, 0x00	; 0
 61c:	82 e0       	ldi	r24, 0x02	; 2
 61e:	bd df       	rcall	.-134    	; 0x59a <sendDataToLCD>
   USART_Transmit_String("4-bit");
 620:	86 e5       	ldi	r24, 0x56	; 86
 622:	91 e0       	ldi	r25, 0x01	; 1
 624:	d0 dd       	rcall	.-1120   	; 0x1c6 <USART_Transmit_String>
 /* send command to setup font etc */
  sendDataToLCD(0x02,0);
 626:	60 e0       	ldi	r22, 0x00	; 0
 628:	70 e0       	ldi	r23, 0x00	; 0
 62a:	82 e0       	ldi	r24, 0x02	; 2
 62c:	b6 df       	rcall	.-148    	; 0x59a <sendDataToLCD>
  sendDataToLCD(0x0C,LCD_DELAY);
 62e:	61 e0       	ldi	r22, 0x01	; 1
 630:	70 e0       	ldi	r23, 0x00	; 0
 632:	8c e0       	ldi	r24, 0x0C	; 12
 634:	b2 df       	rcall	.-156    	; 0x59a <sendDataToLCD>
  /* off display */
    USART_Transmit_String("Off display");
 636:	8c e5       	ldi	r24, 0x5C	; 92
 638:	91 e0       	ldi	r25, 0x01	; 1
 63a:	c5 dd       	rcall	.-1142   	; 0x1c6 <USART_Transmit_String>
    sendDataToLCD(0x00,0);
 63c:	60 e0       	ldi	r22, 0x00	; 0
 63e:	70 e0       	ldi	r23, 0x00	; 0
 640:	80 e0       	ldi	r24, 0x00	; 0
 642:	ab df       	rcall	.-170    	; 0x59a <sendDataToLCD>
    sendDataToLCD(0x08,LCD_DELAY);
 644:	61 e0       	ldi	r22, 0x01	; 1
 646:	70 e0       	ldi	r23, 0x00	; 0
 648:	88 e0       	ldi	r24, 0x08	; 8
 64a:	a7 df       	rcall	.-178    	; 0x59a <sendDataToLCD>
  /* clear display */
    sendDataToLCD(0x00,0);
 64c:	60 e0       	ldi	r22, 0x00	; 0
 64e:	70 e0       	ldi	r23, 0x00	; 0
 650:	80 e0       	ldi	r24, 0x00	; 0
 652:	a3 df       	rcall	.-186    	; 0x59a <sendDataToLCD>
    sendDataToLCD(0x01,LCD_DELAY_CLEAR);
 654:	62 e0       	ldi	r22, 0x02	; 2
 656:	70 e0       	ldi	r23, 0x00	; 0
 658:	81 e0       	ldi	r24, 0x01	; 1
 65a:	9f df       	rcall	.-194    	; 0x59a <sendDataToLCD>
 /* entry mode set */
    sendDataToLCD(0x00,0);
 65c:	60 e0       	ldi	r22, 0x00	; 0
 65e:	70 e0       	ldi	r23, 0x00	; 0
 660:	80 e0       	ldi	r24, 0x00	; 0
 662:	9b df       	rcall	.-202    	; 0x59a <sendDataToLCD>
    sendDataToLCD(0x06,LCD_DELAY);
 664:	61 e0       	ldi	r22, 0x01	; 1
 666:	70 e0       	ldi	r23, 0x00	; 0
 668:	86 e0       	ldi	r24, 0x06	; 6
 66a:	97 df       	rcall	.-210    	; 0x59a <sendDataToLCD>
/* on display */
    sendDataToLCD(0x00,0);
 66c:	60 e0       	ldi	r22, 0x00	; 0
 66e:	70 e0       	ldi	r23, 0x00	; 0
 670:	80 e0       	ldi	r24, 0x00	; 0
 672:	93 df       	rcall	.-218    	; 0x59a <sendDataToLCD>
    sendDataToLCD(0x0D,LCD_DELAY);
 674:	61 e0       	ldi	r22, 0x01	; 1
 676:	70 e0       	ldi	r23, 0x00	; 0
 678:	8d e0       	ldi	r24, 0x0D	; 13
 67a:	8f df       	rcall	.-226    	; 0x59a <sendDataToLCD>
  USART_Transmit_String("LCD Cmd Over");
 67c:	88 e6       	ldi	r24, 0x68	; 104
 67e:	91 e0       	ldi	r25, 0x01	; 1
 680:	a2 dd       	rcall	.-1212   	; 0x1c6 <USART_Transmit_String>

/* Send cursor to home */
   sendDataToLCD(0x00,0);
 682:	60 e0       	ldi	r22, 0x00	; 0
 684:	70 e0       	ldi	r23, 0x00	; 0
 686:	80 e0       	ldi	r24, 0x00	; 0
 688:	88 df       	rcall	.-240    	; 0x59a <sendDataToLCD>
   sendDataToLCD(0x01,LCD_DELAY);  
 68a:	61 e0       	ldi	r22, 0x01	; 1
 68c:	70 e0       	ldi	r23, 0x00	; 0
 68e:	81 e0       	ldi	r24, 0x01	; 1
 690:	84 cf       	rjmp	.-248    	; 0x59a <sendDataToLCD>

00000692 <LCD_gotoXY>:
/*
   Developer Notes:
   r - takes values 0, 1
   c - takes values 0 - 40
*/
void LCD_gotoXY(int r, int c) {
 692:	cf 93       	push	r28
 694:	df 93       	push	r29
 696:	d8 2f       	mov	r29, r24
 698:	c6 2f       	mov	r28, r22
  int i;
  unsigned char ddram_address;
  //USART_Transmit_String("LCD Goto");
  /* Goto to home first */
   sendDataToLCD(0x00 , 0);
 69a:	60 e0       	ldi	r22, 0x00	; 0
 69c:	70 e0       	ldi	r23, 0x00	; 0
 69e:	80 e0       	ldi	r24, 0x00	; 0
 6a0:	7c df       	rcall	.-264    	; 0x59a <sendDataToLCD>
   sendDataToLCD(0x02 , 0); 
 6a2:	60 e0       	ldi	r22, 0x00	; 0
 6a4:	70 e0       	ldi	r23, 0x00	; 0
 6a6:	82 e0       	ldi	r24, 0x02	; 2
 6a8:	78 df       	rcall	.-272    	; 0x59a <sendDataToLCD>
/* Goto 30 character */
  /*for(i=0; i < (r*40+c); i++) {
    sendDataToLCD(0x01,0);
    sendDataToLCD(0x04,0);        
  }*/
    ddram_address = (r*40+c) & 0x7F;
 6aa:	88 e2       	ldi	r24, 0x28	; 40
 6ac:	d8 9f       	mul	r29, r24
 6ae:	c0 0d       	add	r28, r0
 6b0:	11 24       	eor	r1, r1
 6b2:	8c 2f       	mov	r24, r28
 6b4:	8f 77       	andi	r24, 0x7F	; 127
    sendDataToLCD(0x08 | ((ddram_address & 0xF0)>>4), 0);
 6b6:	82 95       	swap	r24
 6b8:	8f 70       	andi	r24, 0x0F	; 15
 6ba:	60 e0       	ldi	r22, 0x00	; 0
 6bc:	70 e0       	ldi	r23, 0x00	; 0
 6be:	88 60       	ori	r24, 0x08	; 8
 6c0:	6c df       	rcall	.-296    	; 0x59a <sendDataToLCD>
    sendDataToLCD(0x00 | (ddram_address & 0x0F), 0);
 6c2:	60 e0       	ldi	r22, 0x00	; 0
 6c4:	70 e0       	ldi	r23, 0x00	; 0
 6c6:	8c 2f       	mov	r24, r28
 6c8:	8f 70       	andi	r24, 0x0F	; 15
}
 6ca:	df 91       	pop	r29
 6cc:	cf 91       	pop	r28
    sendDataToLCD(0x01,0);
    sendDataToLCD(0x04,0);        
  }*/
    ddram_address = (r*40+c) & 0x7F;
    sendDataToLCD(0x08 | ((ddram_address & 0xF0)>>4), 0);
    sendDataToLCD(0x00 | (ddram_address & 0x0F), 0);
 6ce:	65 cf       	rjmp	.-310    	; 0x59a <sendDataToLCD>

000006d0 <LCD_GotoHome>:
    sendDataToLCD(0x00 | (ddram_address & 0x0F), 0);
    LCD_Write(str);
}

void LCD_GotoHome() {
   sendDataToLCD(0x00 , 0);
 6d0:	60 e0       	ldi	r22, 0x00	; 0
 6d2:	70 e0       	ldi	r23, 0x00	; 0
 6d4:	80 e0       	ldi	r24, 0x00	; 0
 6d6:	61 df       	rcall	.-318    	; 0x59a <sendDataToLCD>
   sendDataToLCD(0x02 , 0); 
 6d8:	60 e0       	ldi	r22, 0x00	; 0
 6da:	70 e0       	ldi	r23, 0x00	; 0
 6dc:	82 e0       	ldi	r24, 0x02	; 2
 6de:	5d cf       	rjmp	.-326    	; 0x59a <sendDataToLCD>

000006e0 <LCD_SetScreenScroll>:
}
/* scroll screen to left or right */
void LCD_SetScreenScroll(int left_right) {
 /* entry mode set */
    if(left_right == 0) {
        sendDataToLCD(0x00,0);
 6e0:	60 e0       	ldi	r22, 0x00	; 0
 6e2:	70 e0       	ldi	r23, 0x00	; 0
   sendDataToLCD(0x02 , 0); 
}
/* scroll screen to left or right */
void LCD_SetScreenScroll(int left_right) {
 /* entry mode set */
    if(left_right == 0) {
 6e4:	89 2b       	or	r24, r25
 6e6:	31 f0       	breq	.+12     	; 0x6f4 <LCD_SetScreenScroll+0x14>
        sendDataToLCD(0x00,0);
        sendDataToLCD(0x07,LCD_DELAY);
    } else {
        sendDataToLCD(0x00,0);
 6e8:	80 e0       	ldi	r24, 0x00	; 0
 6ea:	57 df       	rcall	.-338    	; 0x59a <sendDataToLCD>
        sendDataToLCD(0x05,LCD_DELAY);
 6ec:	61 e0       	ldi	r22, 0x01	; 1
 6ee:	70 e0       	ldi	r23, 0x00	; 0
 6f0:	85 e0       	ldi	r24, 0x05	; 5
 6f2:	53 cf       	rjmp	.-346    	; 0x59a <sendDataToLCD>
}
/* scroll screen to left or right */
void LCD_SetScreenScroll(int left_right) {
 /* entry mode set */
    if(left_right == 0) {
        sendDataToLCD(0x00,0);
 6f4:	80 e0       	ldi	r24, 0x00	; 0
 6f6:	51 df       	rcall	.-350    	; 0x59a <sendDataToLCD>
        sendDataToLCD(0x07,LCD_DELAY);
 6f8:	61 e0       	ldi	r22, 0x01	; 1
 6fa:	70 e0       	ldi	r23, 0x00	; 0
 6fc:	87 e0       	ldi	r24, 0x07	; 7
 6fe:	4d cf       	rjmp	.-358    	; 0x59a <sendDataToLCD>

00000700 <LCD_StartLeftScroll>:
        sendDataToLCD(0x00,0);
        sendDataToLCD(0x05,LCD_DELAY);
    }
}
void LCD_StartLeftScroll() {
    sendDataToLCD(0x00,0);
 700:	60 e0       	ldi	r22, 0x00	; 0
 702:	70 e0       	ldi	r23, 0x00	; 0
 704:	80 e0       	ldi	r24, 0x00	; 0
 706:	49 df       	rcall	.-366    	; 0x59a <sendDataToLCD>
    sendDataToLCD(0x05,LCD_DELAY);
 708:	61 e0       	ldi	r22, 0x01	; 1
 70a:	70 e0       	ldi	r23, 0x00	; 0
 70c:	85 e0       	ldi	r24, 0x05	; 5
 70e:	45 cf       	rjmp	.-374    	; 0x59a <sendDataToLCD>

00000710 <LCD_Clear>:
}
void LCD_Clear() {
  /* clear display */
    sendDataToLCD(0x00,0);
 710:	60 e0       	ldi	r22, 0x00	; 0
 712:	70 e0       	ldi	r23, 0x00	; 0
 714:	80 e0       	ldi	r24, 0x00	; 0
 716:	41 df       	rcall	.-382    	; 0x59a <sendDataToLCD>
    sendDataToLCD(0x01,LCD_DELAY_CLEAR);    
 718:	62 e0       	ldi	r22, 0x02	; 2
 71a:	70 e0       	ldi	r23, 0x00	; 0
 71c:	81 e0       	ldi	r24, 0x01	; 1
 71e:	3d cf       	rjmp	.-390    	; 0x59a <sendDataToLCD>

00000720 <LCD_Writen>:
}
void LCD_Writen(char *str, int len) {
 720:	ef 92       	push	r14
 722:	ff 92       	push	r15
 724:	0f 93       	push	r16
 726:	1f 93       	push	r17
 728:	cf 93       	push	r28
 72a:	df 93       	push	r29
int i;
  for(i = 0; i < len; i++) {
 72c:	16 16       	cp	r1, r22
 72e:	17 06       	cpc	r1, r23
 730:	0c f5       	brge	.+66     	; 0x774 <LCD_Writen+0x54>
 732:	ec 01       	movw	r28, r24
 734:	7c 01       	movw	r14, r24
 736:	e6 0e       	add	r14, r22
 738:	f7 1e       	adc	r15, r23
 73a:	8e 01       	movw	r16, r28
   sendDataToLCD(0x10 | ((str[i] & 0xF0)>>4),0);
 73c:	89 91       	ld	r24, Y+
 73e:	99 27       	eor	r25, r25
 740:	87 fd       	sbrc	r24, 7
 742:	90 95       	com	r25
 744:	80 7f       	andi	r24, 0xF0	; 240
 746:	99 27       	eor	r25, r25
 748:	95 95       	asr	r25
 74a:	87 95       	ror	r24
 74c:	95 95       	asr	r25
 74e:	87 95       	ror	r24
 750:	95 95       	asr	r25
 752:	87 95       	ror	r24
 754:	95 95       	asr	r25
 756:	87 95       	ror	r24
 758:	60 e0       	ldi	r22, 0x00	; 0
 75a:	70 e0       	ldi	r23, 0x00	; 0
 75c:	80 61       	ori	r24, 0x10	; 16
 75e:	1d df       	rcall	.-454    	; 0x59a <sendDataToLCD>
   sendDataToLCD(0x10 | (str[i] & 0x0F),0);
 760:	f8 01       	movw	r30, r16
 762:	80 81       	ld	r24, Z
 764:	8f 70       	andi	r24, 0x0F	; 15
 766:	60 e0       	ldi	r22, 0x00	; 0
 768:	70 e0       	ldi	r23, 0x00	; 0
 76a:	80 61       	ori	r24, 0x10	; 16
 76c:	16 df       	rcall	.-468    	; 0x59a <sendDataToLCD>
    sendDataToLCD(0x00,0);
    sendDataToLCD(0x01,LCD_DELAY_CLEAR);    
}
void LCD_Writen(char *str, int len) {
int i;
  for(i = 0; i < len; i++) {
 76e:	ce 15       	cp	r28, r14
 770:	df 05       	cpc	r29, r15
 772:	19 f7       	brne	.-58     	; 0x73a <LCD_Writen+0x1a>
   sendDataToLCD(0x10 | ((str[i] & 0xF0)>>4),0);
   sendDataToLCD(0x10 | (str[i] & 0x0F),0);
  }
}
 774:	df 91       	pop	r29
 776:	cf 91       	pop	r28
 778:	1f 91       	pop	r17
 77a:	0f 91       	pop	r16
 77c:	ff 90       	pop	r15
 77e:	ef 90       	pop	r14
 780:	08 95       	ret

00000782 <LCD_Write>:

void LCD_Write(char *str) {
 782:	ef 92       	push	r14
 784:	ff 92       	push	r15
 786:	0f 93       	push	r16
 788:	1f 93       	push	r17
 78a:	cf 93       	push	r28
 78c:	df 93       	push	r29
 78e:	fc 01       	movw	r30, r24
int i;
  for(i = 0; str[i] !=0; i++) {
 790:	80 81       	ld	r24, Z
 792:	88 23       	and	r24, r24
 794:	99 f1       	breq	.+102    	; 0x7fc <LCD_Write+0x7a>
 796:	ef 01       	movw	r28, r30
 798:	21 96       	adiw	r28, 0x01	; 1
 79a:	7f 01       	movw	r14, r30
 79c:	00 e0       	ldi	r16, 0x00	; 0
 79e:	10 e0       	ldi	r17, 0x00	; 0
   if(i > 15) { 
   // if display is going out of visibility, shift left
    sendDataToLCD(0x01,0);
    sendDataToLCD(0x08,0);
   }
   sendDataToLCD(0x10 | ((str[i] & 0xF0)>>4),0);
 7a0:	99 27       	eor	r25, r25
 7a2:	87 fd       	sbrc	r24, 7
 7a4:	90 95       	com	r25
 7a6:	80 7f       	andi	r24, 0xF0	; 240
 7a8:	99 27       	eor	r25, r25
 7aa:	95 95       	asr	r25
 7ac:	87 95       	ror	r24
 7ae:	95 95       	asr	r25
 7b0:	87 95       	ror	r24
 7b2:	95 95       	asr	r25
 7b4:	87 95       	ror	r24
 7b6:	95 95       	asr	r25
 7b8:	87 95       	ror	r24
 7ba:	60 e0       	ldi	r22, 0x00	; 0
 7bc:	70 e0       	ldi	r23, 0x00	; 0
 7be:	80 61       	ori	r24, 0x10	; 16
 7c0:	ec de       	rcall	.-552    	; 0x59a <sendDataToLCD>
   sendDataToLCD(0x10 | (str[i] & 0x0F),0);
 7c2:	f7 01       	movw	r30, r14
 7c4:	80 81       	ld	r24, Z
 7c6:	8f 70       	andi	r24, 0x0F	; 15
 7c8:	60 e0       	ldi	r22, 0x00	; 0
 7ca:	70 e0       	ldi	r23, 0x00	; 0
 7cc:	80 61       	ori	r24, 0x10	; 16
 7ce:	e5 de       	rcall	.-566    	; 0x59a <sendDataToLCD>
  }
}

void LCD_Write(char *str) {
int i;
  for(i = 0; str[i] !=0; i++) {
 7d0:	0f 5f       	subi	r16, 0xFF	; 255
 7d2:	1f 4f       	sbci	r17, 0xFF	; 255
 7d4:	7e 01       	movw	r14, r28
 7d6:	88 81       	ld	r24, Y
 7d8:	88 23       	and	r24, r24
 7da:	81 f0       	breq	.+32     	; 0x7fc <LCD_Write+0x7a>
   if(i > 15) { 
 7dc:	00 31       	cpi	r16, 0x10	; 16
 7de:	11 05       	cpc	r17, r1
 7e0:	14 f4       	brge	.+4      	; 0x7e6 <LCD_Write+0x64>
 7e2:	21 96       	adiw	r28, 0x01	; 1
 7e4:	dd cf       	rjmp	.-70     	; 0x7a0 <LCD_Write+0x1e>
   // if display is going out of visibility, shift left
    sendDataToLCD(0x01,0);
 7e6:	60 e0       	ldi	r22, 0x00	; 0
 7e8:	70 e0       	ldi	r23, 0x00	; 0
 7ea:	81 e0       	ldi	r24, 0x01	; 1
 7ec:	d6 de       	rcall	.-596    	; 0x59a <sendDataToLCD>
    sendDataToLCD(0x08,0);
 7ee:	60 e0       	ldi	r22, 0x00	; 0
 7f0:	70 e0       	ldi	r23, 0x00	; 0
 7f2:	88 e0       	ldi	r24, 0x08	; 8
 7f4:	d2 de       	rcall	.-604    	; 0x59a <sendDataToLCD>
 7f6:	88 81       	ld	r24, Y
 7f8:	21 96       	adiw	r28, 0x01	; 1
 7fa:	d2 cf       	rjmp	.-92     	; 0x7a0 <LCD_Write+0x1e>
   }
   sendDataToLCD(0x10 | ((str[i] & 0xF0)>>4),0);
   sendDataToLCD(0x10 | (str[i] & 0x0F),0);
  }
}
 7fc:	df 91       	pop	r29
 7fe:	cf 91       	pop	r28
 800:	1f 91       	pop	r17
 802:	0f 91       	pop	r16
 804:	ff 90       	pop	r15
 806:	ef 90       	pop	r14
 808:	08 95       	ret

0000080a <LCD_WriteXY>:
    ddram_address = (r*40+c) & 0x7F;
    sendDataToLCD(0x08 | ((ddram_address & 0xF0)>>4), 0);
    sendDataToLCD(0x00 | (ddram_address & 0x0F), 0);
}

void LCD_WriteXY(int r, int c, char *str) {
 80a:	0f 93       	push	r16
 80c:	1f 93       	push	r17
 80e:	cf 93       	push	r28
 810:	df 93       	push	r29
 812:	08 2f       	mov	r16, r24
 814:	16 2f       	mov	r17, r22
 816:	ea 01       	movw	r28, r20
    unsigned char ddram_address;
     int i=0;
    sendDataToLCD(0x00 , 0);
 818:	60 e0       	ldi	r22, 0x00	; 0
 81a:	70 e0       	ldi	r23, 0x00	; 0
 81c:	80 e0       	ldi	r24, 0x00	; 0
 81e:	bd de       	rcall	.-646    	; 0x59a <sendDataToLCD>
    sendDataToLCD(0x02 , 0);
 820:	60 e0       	ldi	r22, 0x00	; 0
 822:	70 e0       	ldi	r23, 0x00	; 0
 824:	82 e0       	ldi	r24, 0x02	; 2
 826:	b9 de       	rcall	.-654    	; 0x59a <sendDataToLCD>
    ddram_address = (r*40+c) & 0x7F;
 828:	88 e2       	ldi	r24, 0x28	; 40
 82a:	08 9f       	mul	r16, r24
 82c:	10 0d       	add	r17, r0
 82e:	11 24       	eor	r1, r1
 830:	81 2f       	mov	r24, r17
 832:	8f 77       	andi	r24, 0x7F	; 127
    sendDataToLCD(0x08 | ((ddram_address & 0xF0)>>4), 0);
 834:	82 95       	swap	r24
 836:	8f 70       	andi	r24, 0x0F	; 15
 838:	60 e0       	ldi	r22, 0x00	; 0
 83a:	70 e0       	ldi	r23, 0x00	; 0
 83c:	88 60       	ori	r24, 0x08	; 8
 83e:	ad de       	rcall	.-678    	; 0x59a <sendDataToLCD>
    sendDataToLCD(0x00 | (ddram_address & 0x0F), 0);
 840:	60 e0       	ldi	r22, 0x00	; 0
 842:	70 e0       	ldi	r23, 0x00	; 0
 844:	81 2f       	mov	r24, r17
 846:	8f 70       	andi	r24, 0x0F	; 15
 848:	a8 de       	rcall	.-688    	; 0x59a <sendDataToLCD>
    LCD_Write(str);
 84a:	ce 01       	movw	r24, r28
}
 84c:	df 91       	pop	r29
 84e:	cf 91       	pop	r28
 850:	1f 91       	pop	r17
 852:	0f 91       	pop	r16
    sendDataToLCD(0x00 , 0);
    sendDataToLCD(0x02 , 0);
    ddram_address = (r*40+c) & 0x7F;
    sendDataToLCD(0x08 | ((ddram_address & 0xF0)>>4), 0);
    sendDataToLCD(0x00 | (ddram_address & 0x0F), 0);
    LCD_Write(str);
 854:	96 cf       	rjmp	.-212    	; 0x782 <LCD_Write>

00000856 <initTimer>:

unsigned int timestamp[2] = {0,0};
unsigned char debug_led = 1;

void initTimer() {
  sei();
 856:	78 94       	sei
  TIMSK = TIMSK | _BV(TOIE1);
 858:	89 b7       	in	r24, 0x39	; 57
 85a:	84 60       	ori	r24, 0x04	; 4
 85c:	89 bf       	out	0x39, r24	; 57
  TCCR1B = (TCCR1B & 0xF8) | 0x01;
 85e:	8e b5       	in	r24, 0x2e	; 46
 860:	88 7f       	andi	r24, 0xF8	; 248
 862:	81 60       	ori	r24, 0x01	; 1
 864:	8e bd       	out	0x2e, r24	; 46
  #if USE_DEBUG_LED
  DDRB = DDRB | _BV(DDB1);
 866:	b9 9a       	sbi	0x17, 1	; 23
  PORTB = PORTB & ~(_BV(1));
 868:	c1 98       	cbi	0x18, 1	; 24
  debug_led = 0;
 86a:	10 92 60 00 	sts	0x0060, r1
 86e:	08 95       	ret

00000870 <__vector_8>:
 870:	1f 92       	push	r1
 872:	0f 92       	push	r0
 874:	0f b6       	in	r0, 0x3f	; 63
 876:	0f 92       	push	r0
 878:	11 24       	eor	r1, r1
 87a:	8f 93       	push	r24
 87c:	9f 93       	push	r25
 87e:	f8 94       	cli
 880:	80 91 da 01 	lds	r24, 0x01DA
 884:	90 91 db 01 	lds	r25, 0x01DB
 888:	01 96       	adiw	r24, 0x01	; 1
 88a:	90 93 db 01 	sts	0x01DB, r25
 88e:	80 93 da 01 	sts	0x01DA, r24
 892:	00 97       	sbiw	r24, 0x00	; 0
 894:	c1 f4       	brne	.+48     	; 0x8c6 <__vector_8+0x56>
 896:	80 91 dc 01 	lds	r24, 0x01DC
 89a:	90 91 dd 01 	lds	r25, 0x01DD
 89e:	01 96       	adiw	r24, 0x01	; 1
 8a0:	90 93 dd 01 	sts	0x01DD, r25
 8a4:	80 93 dc 01 	sts	0x01DC, r24
 8a8:	80 91 60 00 	lds	r24, 0x0060
 8ac:	88 23       	and	r24, r24
 8ae:	81 f0       	breq	.+32     	; 0x8d0 <__vector_8+0x60>
 8b0:	10 92 60 00 	sts	0x0060, r1
 8b4:	c1 98       	cbi	0x18, 1	; 24
 8b6:	78 94       	sei
 8b8:	9f 91       	pop	r25
 8ba:	8f 91       	pop	r24
 8bc:	0f 90       	pop	r0
 8be:	0f be       	out	0x3f, r0	; 63
 8c0:	0f 90       	pop	r0
 8c2:	1f 90       	pop	r1
 8c4:	18 95       	reti
 8c6:	8f 73       	andi	r24, 0x3F	; 63
 8c8:	99 27       	eor	r25, r25
 8ca:	89 2b       	or	r24, r25
 8cc:	a1 f7       	brne	.-24     	; 0x8b6 <__vector_8+0x46>
 8ce:	ec cf       	rjmp	.-40     	; 0x8a8 <__vector_8+0x38>
 8d0:	81 e0       	ldi	r24, 0x01	; 1
 8d2:	80 93 60 00 	sts	0x0060, r24
 8d6:	c1 9a       	sbi	0x18, 1	; 24
 8d8:	ee cf       	rjmp	.-36     	; 0x8b6 <__vector_8+0x46>

000008da <main>:
 8da:	cf 93       	push	r28
 8dc:	df 93       	push	r29
 8de:	cd b7       	in	r28, 0x3d	; 61
 8e0:	de b7       	in	r29, 0x3e	; 62
 8e2:	64 97       	sbiw	r28, 0x14	; 20
 8e4:	0f b6       	in	r0, 0x3f	; 63
 8e6:	f8 94       	cli
 8e8:	de bf       	out	0x3e, r29	; 62
 8ea:	0f be       	out	0x3f, r0	; 63
 8ec:	cd bf       	out	0x3d, r28	; 61
 8ee:	c1 db       	rcall	.-2174   	; 0x72 <ioinit>
 8f0:	8d e6       	ldi	r24, 0x6D	; 109
 8f2:	90 e0       	ldi	r25, 0x00	; 0
 8f4:	68 dc       	rcall	.-1840   	; 0x1c6 <USART_Transmit_String>
 8f6:	40 e1       	ldi	r20, 0x10	; 16
 8f8:	50 e0       	ldi	r21, 0x00	; 0
 8fa:	be 01       	movw	r22, r28
 8fc:	6f 5f       	subi	r22, 0xFF	; 255
 8fe:	7f 4f       	sbci	r23, 0xFF	; 255
 900:	83 e2       	ldi	r24, 0x23	; 35
 902:	90 e0       	ldi	r25, 0x00	; 0
 904:	1b d0       	rcall	.+54     	; 0x93c <itoa>
 906:	ce 01       	movw	r24, r28
 908:	01 96       	adiw	r24, 0x01	; 1
 90a:	d0 dc       	rcall	.-1632   	; 0x2ac <USART_Transmit_String2>
 90c:	8c e7       	ldi	r24, 0x7C	; 124
 90e:	90 e0       	ldi	r25, 0x00	; 0
 910:	cd dc       	rcall	.-1638   	; 0x2ac <USART_Transmit_String2>
 912:	84 e9       	ldi	r24, 0x94	; 148
 914:	90 e0       	ldi	r25, 0x00	; 0
 916:	ca dc       	rcall	.-1644   	; 0x2ac <USART_Transmit_String2>
 918:	60 e0       	ldi	r22, 0x00	; 0
 91a:	70 e0       	ldi	r23, 0x00	; 0
 91c:	80 e0       	ldi	r24, 0x00	; 0
 91e:	90 e0       	ldi	r25, 0x00	; 0
 920:	b8 de       	rcall	.-656    	; 0x692 <LCD_gotoXY>
 922:	8d ea       	ldi	r24, 0xAD	; 173
 924:	90 e0       	ldi	r25, 0x00	; 0
 926:	2d df       	rcall	.-422    	; 0x782 <LCD_Write>
 928:	89 eb       	ldi	r24, 0xB9	; 185
 92a:	90 e0       	ldi	r25, 0x00	; 0
 92c:	bf dc       	rcall	.-1666   	; 0x2ac <USART_Transmit_String2>
 92e:	ff dc       	rcall	.-1538   	; 0x32e <USART_Receive_String>
 930:	bd dc       	rcall	.-1670   	; 0x2ac <USART_Transmit_String2>
 932:	85 ed       	ldi	r24, 0xD5	; 213
 934:	90 e0       	ldi	r25, 0x00	; 0
 936:	ba dc       	rcall	.-1676   	; 0x2ac <USART_Transmit_String2>
 938:	00 00       	nop
 93a:	fe cf       	rjmp	.-4      	; 0x938 <main+0x5e>

0000093c <itoa>:
 93c:	fb 01       	movw	r30, r22
 93e:	9f 01       	movw	r18, r30
 940:	e8 94       	clt
 942:	42 30       	cpi	r20, 0x02	; 2
 944:	bc f0       	brlt	.+46     	; 0x974 <itoa+0x38>
 946:	45 32       	cpi	r20, 0x25	; 37
 948:	ac f4       	brge	.+42     	; 0x974 <itoa+0x38>
 94a:	4a 30       	cpi	r20, 0x0A	; 10
 94c:	29 f4       	brne	.+10     	; 0x958 <itoa+0x1c>
 94e:	97 fb       	bst	r25, 7
 950:	1e f4       	brtc	.+6      	; 0x958 <itoa+0x1c>
 952:	90 95       	com	r25
 954:	81 95       	neg	r24
 956:	9f 4f       	sbci	r25, 0xFF	; 255
 958:	64 2f       	mov	r22, r20
 95a:	77 27       	eor	r23, r23
 95c:	1e d0       	rcall	.+60     	; 0x99a <__udivmodhi4>
 95e:	80 5d       	subi	r24, 0xD0	; 208
 960:	8a 33       	cpi	r24, 0x3A	; 58
 962:	0c f0       	brlt	.+2      	; 0x966 <itoa+0x2a>
 964:	89 5d       	subi	r24, 0xD9	; 217
 966:	81 93       	st	Z+, r24
 968:	cb 01       	movw	r24, r22
 96a:	00 97       	sbiw	r24, 0x00	; 0
 96c:	a9 f7       	brne	.-22     	; 0x958 <itoa+0x1c>
 96e:	16 f4       	brtc	.+4      	; 0x974 <itoa+0x38>
 970:	5d e2       	ldi	r21, 0x2D	; 45
 972:	51 93       	st	Z+, r21
 974:	10 82       	st	Z, r1
 976:	c9 01       	movw	r24, r18
 978:	00 c0       	rjmp	.+0      	; 0x97a <strrev>

0000097a <strrev>:
 97a:	dc 01       	movw	r26, r24
 97c:	fc 01       	movw	r30, r24
 97e:	67 2f       	mov	r22, r23
 980:	71 91       	ld	r23, Z+
 982:	77 23       	and	r23, r23
 984:	e1 f7       	brne	.-8      	; 0x97e <strrev+0x4>
 986:	32 97       	sbiw	r30, 0x02	; 2
 988:	04 c0       	rjmp	.+8      	; 0x992 <strrev+0x18>
 98a:	7c 91       	ld	r23, X
 98c:	6d 93       	st	X+, r22
 98e:	70 83       	st	Z, r23
 990:	62 91       	ld	r22, -Z
 992:	ae 17       	cp	r26, r30
 994:	bf 07       	cpc	r27, r31
 996:	c8 f3       	brcs	.-14     	; 0x98a <strrev+0x10>
 998:	08 95       	ret

0000099a <__udivmodhi4>:
 99a:	aa 1b       	sub	r26, r26
 99c:	bb 1b       	sub	r27, r27
 99e:	51 e1       	ldi	r21, 0x11	; 17
 9a0:	07 c0       	rjmp	.+14     	; 0x9b0 <__udivmodhi4_ep>

000009a2 <__udivmodhi4_loop>:
 9a2:	aa 1f       	adc	r26, r26
 9a4:	bb 1f       	adc	r27, r27
 9a6:	a6 17       	cp	r26, r22
 9a8:	b7 07       	cpc	r27, r23
 9aa:	10 f0       	brcs	.+4      	; 0x9b0 <__udivmodhi4_ep>
 9ac:	a6 1b       	sub	r26, r22
 9ae:	b7 0b       	sbc	r27, r23

000009b0 <__udivmodhi4_ep>:
 9b0:	88 1f       	adc	r24, r24
 9b2:	99 1f       	adc	r25, r25
 9b4:	5a 95       	dec	r21
 9b6:	a9 f7       	brne	.-22     	; 0x9a2 <__udivmodhi4_loop>
 9b8:	80 95       	com	r24
 9ba:	90 95       	com	r25
 9bc:	bc 01       	movw	r22, r24
 9be:	cd 01       	movw	r24, r26
 9c0:	08 95       	ret

000009c2 <_exit>:
 9c2:	f8 94       	cli

000009c4 <__stop_program>:
 9c4:	ff cf       	rjmp	.-2      	; 0x9c4 <__stop_program>
